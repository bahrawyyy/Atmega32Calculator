
EME_S4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000437a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  0000437a  0000440e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ec  008000ec  0000449a  2**0
                  ALLOC
  3 .stab         00003588  00000000  00000000  0000449c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ad  00000000  00000000  00007a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000091d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009331  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000094c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b505  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c606  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 14 	call	0x28ae	; 0x28ae <main>
      8a:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 21 	jmp	0x432e	; 0x432e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 21 	jmp	0x432e	; 0x432e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 21 	jmp	0x4306	; 0x4306 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9f 21 	jmp	0x433e	; 0x433e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EXTI_init>:

#include "EXT_INTERRUPTS.h"
#include <avr/interrupt.h>
#include "../../Bit_Math.h"

void EXTI_init(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	if(EXT_INT0_MODE == ENABLE){
		EXTI_enable(EXTI0);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 67 06 	call	0xcce	; 0xcce <EXTI_enable>
			CLR_BIT(MCUCR,ISC01);
		}else if(INT0_SENSE_MODE == FAL_EDGE_TRIG){
			CLR_BIT(MCUCR,ISC00);
			SET_BIT(MCUCR,ISC01);
		}else if(INT0_SENSE_MODE == RIS_EDGE_TRIG){
			SET_BIT(MCUCR,ISC00);
     cac:	a5 e5       	ldi	r26, 0x55	; 85
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e5 e5       	ldi	r30, 0x55	; 85
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
     cba:	a5 e5       	ldi	r26, 0x55	; 85
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e5 e5       	ldi	r30, 0x55	; 85
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	82 60       	ori	r24, 0x02	; 2
     cc6:	8c 93       	st	X, r24
		} else if (INT0_SENSE_MODE == RIS_EDGE_TRIG) {
			SET_BIT(MCUCR, ISC10);
			SET_BIT(MCUCR, ISC11);
		}
	}
}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <EXTI_enable>:
void EXTI_enable(EXTI_type interrupt){
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <EXTI_enable+0x6>
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt){
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	3b 83       	std	Y+3, r19	; 0x03
     ce4:	2a 83       	std	Y+2, r18	; 0x02
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	91 05       	cpc	r25, r1
     cee:	89 f0       	breq	.+34     	; 0xd12 <EXTI_enable+0x44>
     cf0:	2a 81       	ldd	r18, Y+2	; 0x02
     cf2:	3b 81       	ldd	r19, Y+3	; 0x03
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	a1 f0       	breq	.+40     	; 0xd22 <EXTI_enable+0x54>
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	b9 f4       	brne	.+46     	; 0xd30 <EXTI_enable+0x62>
	case EXTI0:
		SET_BIT(GICR,INT0);
     d02:	ab e5       	ldi	r26, 0x5B	; 91
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	eb e5       	ldi	r30, 0x5B	; 91
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	80 64       	ori	r24, 0x40	; 64
     d0e:	8c 93       	st	X, r24
     d10:	0f c0       	rjmp	.+30     	; 0xd30 <EXTI_enable+0x62>
		break;
	case EXTI1:
		SET_BIT(GICR,INT1);
     d12:	ab e5       	ldi	r26, 0x5B	; 91
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	eb e5       	ldi	r30, 0x5B	; 91
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	8c 93       	st	X, r24
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <EXTI_enable+0x62>
		break;
	case EXTI2:
		SET_BIT(GICR,INT2);
     d22:	ab e5       	ldi	r26, 0x5B	; 91
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	eb e5       	ldi	r30, 0x5B	; 91
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 62       	ori	r24, 0x20	; 32
     d2e:	8c 93       	st	X, r24
		break;
	}
}
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <EXTI_disable>:
void EXTI_disable(EXTI_type interrupt){
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <EXTI_disable+0x6>
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
	switch (interrupt) {
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3b 83       	std	Y+3, r19	; 0x03
     d52:	2a 83       	std	Y+2, r18	; 0x02
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	89 f0       	breq	.+34     	; 0xd80 <EXTI_disable+0x44>
     d5e:	2a 81       	ldd	r18, Y+2	; 0x02
     d60:	3b 81       	ldd	r19, Y+3	; 0x03
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	a1 f0       	breq	.+40     	; 0xd90 <EXTI_disable+0x54>
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	9b 81       	ldd	r25, Y+3	; 0x03
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	b9 f4       	brne	.+46     	; 0xd9e <EXTI_disable+0x62>
	case EXTI0:
		CLR_BIT(GICR, INT0);
     d70:	ab e5       	ldi	r26, 0x5B	; 91
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	eb e5       	ldi	r30, 0x5B	; 91
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8f 7b       	andi	r24, 0xBF	; 191
     d7c:	8c 93       	st	X, r24
     d7e:	0f c0       	rjmp	.+30     	; 0xd9e <EXTI_disable+0x62>
		break;
	case EXTI1:
		CLR_BIT(GICR, INT1);
     d80:	ab e5       	ldi	r26, 0x5B	; 91
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	eb e5       	ldi	r30, 0x5B	; 91
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 77       	andi	r24, 0x7F	; 127
     d8c:	8c 93       	st	X, r24
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <EXTI_disable+0x62>
		break;
	case EXTI2:
		CLR_BIT(GICR, INT2);
     d90:	ab e5       	ldi	r26, 0x5B	; 91
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	eb e5       	ldi	r30, 0x5B	; 91
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8f 7d       	andi	r24, 0xDF	; 223
     d9c:	8c 93       	st	X, r24
		break;
	}
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <Dio_write>:
 *  Created on: Sep 8, 2022
 *      Author: 10
 */
#include "Dio.h"

void Dio_write(channel_type channel , Dio_Status_Type state){
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <Dio_write+0x6>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <Dio_write+0x8>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	8b 83       	std	Y+3, r24	; 0x03
     db8:	6c 83       	std	Y+4, r22	; 0x04
	Dio_Port_Type port = channel / 8;
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	86 95       	lsr	r24
     dbe:	86 95       	lsr	r24
     dc0:	86 95       	lsr	r24
     dc2:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin_Type pin = channel % 8;
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	87 70       	andi	r24, 0x07	; 7
     dc8:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A){
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	88 23       	and	r24, r24
     dce:	61 f5       	brne	.+88     	; 0xe28 <Dio_write+0x7e>
		if(state == HIGH){
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <Dio_write+0x54>
			SET_BIT(PORTA,pin);
     dd6:	ab e3       	ldi	r26, 0x3B	; 59
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	eb e3       	ldi	r30, 0x3B	; 59
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <Dio_write+0x4a>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <Dio_write+0x46>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	a1 c0       	rjmp	.+322    	; 0xf40 <Dio_write+0x196>
		}else{
			CLR_BIT(PORTA,pin);
     dfe:	ab e3       	ldi	r26, 0x3B	; 59
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	eb e3       	ldi	r30, 0x3B	; 59
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <Dio_write+0x72>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <Dio_write+0x6e>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	8c c0       	rjmp	.+280    	; 0xf40 <Dio_write+0x196>
		}
	}else if(port == PORT_B){
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	61 f5       	brne	.+88     	; 0xe86 <Dio_write+0xdc>
		if(state == HIGH){
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	a1 f4       	brne	.+40     	; 0xe5c <Dio_write+0xb2>
			SET_BIT(PORTB,pin);
     e34:	a8 e3       	ldi	r26, 0x38	; 56
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e8 e3       	ldi	r30, 0x38	; 56
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <Dio_write+0xa8>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <Dio_write+0xa4>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	72 c0       	rjmp	.+228    	; 0xf40 <Dio_write+0x196>
		}else{
			CLR_BIT(PORTB,pin);
     e5c:	a8 e3       	ldi	r26, 0x38	; 56
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e8 e3       	ldi	r30, 0x38	; 56
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <Dio_write+0xd0>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <Dio_write+0xcc>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	5d c0       	rjmp	.+186    	; 0xf40 <Dio_write+0x196>
		}
	}else if(port == PORT_C){
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	61 f5       	brne	.+88     	; 0xee4 <Dio_write+0x13a>
		if(state == HIGH){
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <Dio_write+0x110>
			SET_BIT(PORTC,pin);
     e92:	a5 e3       	ldi	r26, 0x35	; 53
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e5 e3       	ldi	r30, 0x35	; 53
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <Dio_write+0x106>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <Dio_write+0x102>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	43 c0       	rjmp	.+134    	; 0xf40 <Dio_write+0x196>
		}else{
			CLR_BIT(PORTC,pin);
     eba:	a5 e3       	ldi	r26, 0x35	; 53
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e5 e3       	ldi	r30, 0x35	; 53
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <Dio_write+0x12e>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <Dio_write+0x12a>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	2e c0       	rjmp	.+92     	; 0xf40 <Dio_write+0x196>
		}
	}else if(port == PORT_D){
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	59 f5       	brne	.+86     	; 0xf40 <Dio_write+0x196>
			if(state == HIGH){
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	a1 f4       	brne	.+40     	; 0xf18 <Dio_write+0x16e>
				SET_BIT(PORTD,pin);
     ef0:	a2 e3       	ldi	r26, 0x32	; 50
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e2 e3       	ldi	r30, 0x32	; 50
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <Dio_write+0x164>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <Dio_write+0x160>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	14 c0       	rjmp	.+40     	; 0xf40 <Dio_write+0x196>
			}else{
				CLR_BIT(PORTD,pin);
     f18:	a2 e3       	ldi	r26, 0x32	; 50
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e2 e3       	ldi	r30, 0x32	; 50
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <Dio_write+0x18c>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <Dio_write+0x188>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
			}
		}
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <Dio_read>:

Dio_Status_Type Dio_read(channel_type channel){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <Dio_read+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <Dio_read+0x8>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8c 83       	std	Y+4, r24	; 0x04
	Dio_Port_Type port = channel / 8;
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	86 95       	lsr	r24
     f60:	86 95       	lsr	r24
     f62:	86 95       	lsr	r24
     f64:	8b 83       	std	Y+3, r24	; 0x03
		Dio_Pin_Type pin = channel % 8;
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	87 70       	andi	r24, 0x07	; 7
     f6a:	8a 83       	std	Y+2, r24	; 0x02
		Dio_Status_Type status = 0;
     f6c:	19 82       	std	Y+1, r1	; 0x01


		if(port == PORT_A){
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 23       	and	r24, r24
     f72:	91 f4       	brne	.+36     	; 0xf98 <Dio_read+0x4a>
			status = GET_BIT(PINA,pin);
     f74:	e9 e3       	ldi	r30, 0x39	; 57
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <Dio_read+0x3e>
     f88:	55 95       	asr	r21
     f8a:	47 95       	ror	r20
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <Dio_read+0x3a>
     f90:	ca 01       	movw	r24, r20
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	3e c0       	rjmp	.+124    	; 0x1014 <Dio_read+0xc6>
		}else if(port == PORT_B){
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	91 f4       	brne	.+36     	; 0xfc2 <Dio_read+0x74>
			status = GET_BIT(PINB,pin);
     f9e:	e6 e3       	ldi	r30, 0x36	; 54
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a9 01       	movw	r20, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <Dio_read+0x68>
     fb2:	55 95       	asr	r21
     fb4:	47 95       	ror	r20
     fb6:	8a 95       	dec	r24
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <Dio_read+0x64>
     fba:	ca 01       	movw	r24, r20
     fbc:	81 70       	andi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	29 c0       	rjmp	.+82     	; 0x1014 <Dio_read+0xc6>
		}else if(port == PORT_C){
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	91 f4       	brne	.+36     	; 0xfec <Dio_read+0x9e>
			status = GET_BIT(PINC,pin);
     fc8:	e3 e3       	ldi	r30, 0x33	; 51
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a9 01       	movw	r20, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <Dio_read+0x92>
     fdc:	55 95       	asr	r21
     fde:	47 95       	ror	r20
     fe0:	8a 95       	dec	r24
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <Dio_read+0x8e>
     fe4:	ca 01       	movw	r24, r20
     fe6:	81 70       	andi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <Dio_read+0xc6>
		}else if(port == PORT_D){
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	89 f4       	brne	.+34     	; 0x1014 <Dio_read+0xc6>
			status = GET_BIT(PIND,pin);
     ff2:	e0 e3       	ldi	r30, 0x30	; 48
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <Dio_read+0xbc>
    1006:	55 95       	asr	r21
    1008:	47 95       	ror	r20
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <Dio_read+0xb8>
    100e:	ca 01       	movw	r24, r20
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
		}
	return status;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <Dio_writePort>:


void Dio_writePort(Dio_Port_Type port , unsigned char level){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <Dio_writePort+0x6>
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	6a 83       	std	Y+2, r22	; 0x02
	if(port == PORT_A){
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	88 23       	and	r24, r24
    1036:	29 f4       	brne	.+10     	; 0x1042 <Dio_writePort+0x1e>
		PORTA = level;
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	80 83       	st	Z, r24
    1040:	17 c0       	rjmp	.+46     	; 0x1070 <Dio_writePort+0x4c>
	}else if(port == PORT_B){
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	29 f4       	brne	.+10     	; 0x1052 <Dio_writePort+0x2e>
		PORTB = level;
    1048:	e8 e3       	ldi	r30, 0x38	; 56
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	80 83       	st	Z, r24
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <Dio_writePort+0x4c>
	}else if(port == PORT_C){
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	29 f4       	brne	.+10     	; 0x1062 <Dio_writePort+0x3e>
		PORTC = level;
    1058:	e5 e3       	ldi	r30, 0x35	; 53
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	80 83       	st	Z, r24
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <Dio_writePort+0x4c>
	}else if(port == PORT_D){
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	21 f4       	brne	.+8      	; 0x1070 <Dio_writePort+0x4c>
		PORTD = level;
    1068:	e2 e3       	ldi	r30, 0x32	; 50
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	80 83       	st	Z, r24
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <Dio_init>:

void Dio_init(void){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <Dio_init+0x6>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    1084:	1a 82       	std	Y+2, r1	; 0x02
    1086:	19 82       	std	Y+1, r1	; 0x01
		for(i=0 ; i<PIN_COUNT ; i++){
    1088:	1a 82       	std	Y+2, r1	; 0x02
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	fb c1       	rjmp	.+1014   	; 0x1484 <Dio_init+0x40a>
			if(Dio_Cfg_Pins[i].PinPort == PORT_A){
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	fc 01       	movw	r30, r24
    109c:	e8 57       	subi	r30, 0x78	; 120
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <Dio_init+0x2e>
    10a6:	71 c0       	rjmp	.+226    	; 0x118a <Dio_init+0x110>
				if(Dio_Cfg_Pins[i].dir == OUTPUT){
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	fc 01       	movw	r30, r24
    10b8:	e8 57       	subi	r30, 0x78	; 120
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	80 81       	ld	r24, Z
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	e9 f4       	brne	.+58     	; 0x10fc <Dio_init+0x82>
					SET_BIT(DDRA,Dio_Cfg_Pins[i].Pin);
    10c2:	aa e3       	ldi	r26, 0x3A	; 58
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ea e3       	ldi	r30, 0x3A	; 58
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	fc 01       	movw	r30, r24
    10dc:	e7 57       	subi	r30, 0x77	; 119
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <Dio_init+0x78>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <Dio_init+0x74>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	bf c1       	rjmp	.+894    	; 0x147a <Dio_init+0x400>
				}else{
					CLR_BIT(DDRA,Dio_Cfg_Pins[i].Pin);
    10fc:	aa e3       	ldi	r26, 0x3A	; 58
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ea e3       	ldi	r30, 0x3A	; 58
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	fc 01       	movw	r30, r24
    1116:	e7 57       	subi	r30, 0x77	; 119
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <Dio_init+0xb2>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <Dio_init+0xae>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
					if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	fc 01       	movw	r30, r24
    1144:	e5 57       	subi	r30, 0x75	; 117
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	09 f0       	breq	.+2      	; 0x1150 <Dio_init+0xd6>
    114e:	95 c1       	rjmp	.+810    	; 0x147a <Dio_init+0x400>
							SET_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	fc 01       	movw	r30, r24
    116a:	e7 57       	subi	r30, 0x77	; 119
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <Dio_init+0x106>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <Dio_init+0x102>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	78 c1       	rjmp	.+752    	; 0x147a <Dio_init+0x400>
					}
				}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_B){
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	fc 01       	movw	r30, r24
    1198:	e8 57       	subi	r30, 0x78	; 120
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 81       	ld	r24, Z
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <Dio_init+0x12a>
    11a2:	71 c0       	rjmp	.+226    	; 0x1286 <Dio_init+0x20c>
				if(Dio_Cfg_Pins[i].dir == OUTPUT){
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	fc 01       	movw	r30, r24
    11b4:	e8 57       	subi	r30, 0x78	; 120
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	e9 f4       	brne	.+58     	; 0x11f8 <Dio_init+0x17e>
					SET_BIT(DDRB,Dio_Cfg_Pins[i].Pin);
    11be:	a7 e3       	ldi	r26, 0x37	; 55
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e7 e3       	ldi	r30, 0x37	; 55
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	9a 81       	ldd	r25, Y+2	; 0x02
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	fc 01       	movw	r30, r24
    11d8:	e7 57       	subi	r30, 0x77	; 119
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 81       	ld	r24, Z
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <Dio_init+0x174>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <Dio_init+0x170>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	41 c1       	rjmp	.+642    	; 0x147a <Dio_init+0x400>
				}else{
					CLR_BIT(DDRB,Dio_Cfg_Pins[i].Pin);
    11f8:	a7 e3       	ldi	r26, 0x37	; 55
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e7 e3       	ldi	r30, 0x37	; 55
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	fc 01       	movw	r30, r24
    1212:	e7 57       	subi	r30, 0x77	; 119
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <Dio_init+0x1ae>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <Dio_init+0x1aa>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
					if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	fc 01       	movw	r30, r24
    1240:	e5 57       	subi	r30, 0x75	; 117
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	09 f0       	breq	.+2      	; 0x124c <Dio_init+0x1d2>
    124a:	17 c1       	rjmp	.+558    	; 0x147a <Dio_init+0x400>
							SET_BIT(PORTB,Dio_Cfg_Pins[i].Pin);
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	fc 01       	movw	r30, r24
    1266:	e7 57       	subi	r30, 0x77	; 119
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 81       	ld	r24, Z
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <Dio_init+0x202>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <Dio_init+0x1fe>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	fa c0       	rjmp	.+500    	; 0x147a <Dio_init+0x400>
					}
				}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_C){
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	fc 01       	movw	r30, r24
    1294:	e8 57       	subi	r30, 0x78	; 120
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	09 f0       	breq	.+2      	; 0x12a0 <Dio_init+0x226>
    129e:	71 c0       	rjmp	.+226    	; 0x1382 <Dio_init+0x308>
				if(Dio_Cfg_Pins[i].dir == OUTPUT){
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	01 96       	adiw	r24, 0x01	; 1
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	fc 01       	movw	r30, r24
    12b0:	e8 57       	subi	r30, 0x78	; 120
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	80 81       	ld	r24, Z
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	e9 f4       	brne	.+58     	; 0x12f4 <Dio_init+0x27a>
					SET_BIT(DDRC,Dio_Cfg_Pins[i].Pin);
    12ba:	a4 e3       	ldi	r26, 0x34	; 52
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e4 e3       	ldi	r30, 0x34	; 52
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	fc 01       	movw	r30, r24
    12d4:	e7 57       	subi	r30, 0x77	; 119
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <Dio_init+0x270>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <Dio_init+0x26c>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	c3 c0       	rjmp	.+390    	; 0x147a <Dio_init+0x400>
				}else{
					CLR_BIT(DDRC,Dio_Cfg_Pins[i].Pin);
    12f4:	a4 e3       	ldi	r26, 0x34	; 52
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e4 e3       	ldi	r30, 0x34	; 52
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	fc 01       	movw	r30, r24
    130e:	e7 57       	subi	r30, 0x77	; 119
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	80 81       	ld	r24, Z
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <Dio_init+0x2aa>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <Dio_init+0x2a6>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
					if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	fc 01       	movw	r30, r24
    133c:	e5 57       	subi	r30, 0x75	; 117
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	09 f0       	breq	.+2      	; 0x1348 <Dio_init+0x2ce>
    1346:	99 c0       	rjmp	.+306    	; 0x147a <Dio_init+0x400>
							SET_BIT(PORTC,Dio_Cfg_Pins[i].Pin);
    1348:	a5 e3       	ldi	r26, 0x35	; 53
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	fc 01       	movw	r30, r24
    1362:	e7 57       	subi	r30, 0x77	; 119
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <Dio_init+0x2fe>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <Dio_init+0x2fa>
    137c:	84 2b       	or	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	7c c0       	rjmp	.+248    	; 0x147a <Dio_init+0x400>
					}
				}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_D){
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	fc 01       	movw	r30, r24
    1390:	e8 57       	subi	r30, 0x78	; 120
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	09 f0       	breq	.+2      	; 0x139c <Dio_init+0x322>
    139a:	6f c0       	rjmp	.+222    	; 0x147a <Dio_init+0x400>
				if(Dio_Cfg_Pins[i].dir == OUTPUT){
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	fc 01       	movw	r30, r24
    13ac:	e8 57       	subi	r30, 0x78	; 120
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	e9 f4       	brne	.+58     	; 0x13f0 <Dio_init+0x376>
					SET_BIT(DDRD,Dio_Cfg_Pins[i].Pin);
    13b6:	a1 e3       	ldi	r26, 0x31	; 49
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e1 e3       	ldi	r30, 0x31	; 49
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	fc 01       	movw	r30, r24
    13d0:	e7 57       	subi	r30, 0x77	; 119
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <Dio_init+0x36c>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <Dio_init+0x368>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	45 c0       	rjmp	.+138    	; 0x147a <Dio_init+0x400>
				}else{
					CLR_BIT(DDRD,Dio_Cfg_Pins[i].Pin);
    13f0:	a1 e3       	ldi	r26, 0x31	; 49
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e1 e3       	ldi	r30, 0x31	; 49
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	fc 01       	movw	r30, r24
    140a:	e7 57       	subi	r30, 0x77	; 119
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <Dio_init+0x3a6>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <Dio_init+0x3a2>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
					if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	fc 01       	movw	r30, r24
    1438:	e5 57       	subi	r30, 0x75	; 117
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	80 81       	ld	r24, Z
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	e1 f4       	brne	.+56     	; 0x147a <Dio_init+0x400>
							SET_BIT(PORTD,Dio_Cfg_Pins[i].Pin);
    1442:	a2 e3       	ldi	r26, 0x32	; 50
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e2 e3       	ldi	r30, 0x32	; 50
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	fc 01       	movw	r30, r24
    145c:	e7 57       	subi	r30, 0x77	; 119
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 81       	ld	r24, Z
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <Dio_init+0x3f8>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <Dio_init+0x3f4>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
	}
}

void Dio_init(void){
	int i = 0;
		for(i=0 ; i<PIN_COUNT ; i++){
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	83 31       	cpi	r24, 0x13	; 19
    148a:	91 05       	cpc	r25, r1
    148c:	0c f4       	brge	.+2      	; 0x1490 <Dio_init+0x416>
    148e:	ff cd       	rjmp	.-1026   	; 0x108e <Dio_init+0x14>
							SET_BIT(PORTD,Dio_Cfg_Pins[i].Pin);
					}
				}
			}
		}
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <SevenSegment>:

#include "SevenSegment.h"
#include "../../MCAL/Dio/Dio_Types.h"


void SevenSegment(unsigned char num){
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <SevenSegment+0x6>
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
	switch(num){
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3b 83       	std	Y+3, r19	; 0x03
    14b0:	2a 83       	std	Y+2, r18	; 0x02
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <SevenSegment+0x24>
    14bc:	93 c0       	rjmp	.+294    	; 0x15e4 <SevenSegment+0x14a>
    14be:	2a 81       	ldd	r18, Y+2	; 0x02
    14c0:	3b 81       	ldd	r19, Y+3	; 0x03
    14c2:	25 30       	cpi	r18, 0x05	; 5
    14c4:	31 05       	cpc	r19, r1
    14c6:	ec f4       	brge	.+58     	; 0x1502 <SevenSegment+0x68>
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <SevenSegment+0x3a>
    14d2:	55 c0       	rjmp	.+170    	; 0x157e <SevenSegment+0xe4>
    14d4:	2a 81       	ldd	r18, Y+2	; 0x02
    14d6:	3b 81       	ldd	r19, Y+3	; 0x03
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <SevenSegment+0x4e>
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	99 f1       	breq	.+102    	; 0x154c <SevenSegment+0xb2>
    14e6:	00 c1       	rjmp	.+512    	; 0x16e8 <SevenSegment+0x24e>
    14e8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ea:	3b 81       	ldd	r19, Y+3	; 0x03
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <SevenSegment+0x5a>
    14f2:	4e c0       	rjmp	.+156    	; 0x1590 <SevenSegment+0xf6>
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <SevenSegment+0x66>
    14fe:	5d c0       	rjmp	.+186    	; 0x15ba <SevenSegment+0x120>
    1500:	f3 c0       	rjmp	.+486    	; 0x16e8 <SevenSegment+0x24e>
    1502:	2a 81       	ldd	r18, Y+2	; 0x02
    1504:	3b 81       	ldd	r19, Y+3	; 0x03
    1506:	27 30       	cpi	r18, 0x07	; 7
    1508:	31 05       	cpc	r19, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <SevenSegment+0x74>
    150c:	aa c0       	rjmp	.+340    	; 0x1662 <SevenSegment+0x1c8>
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	9b 81       	ldd	r25, Y+3	; 0x03
    1512:	88 30       	cpi	r24, 0x08	; 8
    1514:	91 05       	cpc	r25, r1
    1516:	6c f4       	brge	.+26     	; 0x1532 <SevenSegment+0x98>
    1518:	2a 81       	ldd	r18, Y+2	; 0x02
    151a:	3b 81       	ldd	r19, Y+3	; 0x03
    151c:	25 30       	cpi	r18, 0x05	; 5
    151e:	31 05       	cpc	r19, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <SevenSegment+0x8a>
    1522:	71 c0       	rjmp	.+226    	; 0x1606 <SevenSegment+0x16c>
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	86 30       	cpi	r24, 0x06	; 6
    152a:	91 05       	cpc	r25, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <SevenSegment+0x96>
    152e:	80 c0       	rjmp	.+256    	; 0x1630 <SevenSegment+0x196>
    1530:	db c0       	rjmp	.+438    	; 0x16e8 <SevenSegment+0x24e>
    1532:	2a 81       	ldd	r18, Y+2	; 0x02
    1534:	3b 81       	ldd	r19, Y+3	; 0x03
    1536:	28 30       	cpi	r18, 0x08	; 8
    1538:	31 05       	cpc	r19, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <SevenSegment+0xa4>
    153c:	9f c0       	rjmp	.+318    	; 0x167c <SevenSegment+0x1e2>
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	89 30       	cpi	r24, 0x09	; 9
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <SevenSegment+0xb0>
    1548:	b6 c0       	rjmp	.+364    	; 0x16b6 <SevenSegment+0x21c>
    154a:	ce c0       	rjmp	.+412    	; 0x16e8 <SevenSegment+0x24e>
	case 0:
			Dio_write(PORTC_0,HIGH);
    154c:	80 e1       	ldi	r24, 0x10	; 16
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_1,HIGH);
    1554:	81 e1       	ldi	r24, 0x11	; 17
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    155c:	82 e1       	ldi	r24, 0x12	; 18
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    1564:	83 e1       	ldi	r24, 0x13	; 19
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_4,HIGH);
    156c:	84 e1       	ldi	r24, 0x14	; 20
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_5,HIGH);
    1574:	85 e1       	ldi	r24, 0x15	; 21
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    157c:	b9 c0       	rjmp	.+370    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 1:
			Dio_write(PORTC_1,HIGH);
    157e:	81 e1       	ldi	r24, 0x11	; 17
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    1586:	82 e1       	ldi	r24, 0x12	; 18
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    158e:	b0 c0       	rjmp	.+352    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 2:
			Dio_write(PORTC_0,HIGH);
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_1,HIGH);
    1598:	81 e1       	ldi	r24, 0x11	; 17
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    15a0:	83 e1       	ldi	r24, 0x13	; 19
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_4,HIGH);
    15a8:	84 e1       	ldi	r24, 0x14	; 20
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    15b0:	86 e1       	ldi	r24, 0x16	; 22
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    15b8:	9b c0       	rjmp	.+310    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 3:
			Dio_write(PORTC_0,HIGH);
    15ba:	80 e1       	ldi	r24, 0x10	; 16
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_1,HIGH);
    15c2:	81 e1       	ldi	r24, 0x11	; 17
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    15ca:	82 e1       	ldi	r24, 0x12	; 18
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    15d2:	83 e1       	ldi	r24, 0x13	; 19
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    15da:	86 e1       	ldi	r24, 0x16	; 22
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    15e2:	86 c0       	rjmp	.+268    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 4:
			Dio_write(PORTC_1,HIGH);
    15e4:	81 e1       	ldi	r24, 0x11	; 17
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    15ec:	82 e1       	ldi	r24, 0x12	; 18
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_5,HIGH);
    15f4:	85 e1       	ldi	r24, 0x15	; 21
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    15fc:	86 e1       	ldi	r24, 0x16	; 22
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1604:	75 c0       	rjmp	.+234    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 5:
			Dio_write(PORTC_0,HIGH);
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    160e:	82 e1       	ldi	r24, 0x12	; 18
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    1616:	83 e1       	ldi	r24, 0x13	; 19
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_5,HIGH);
    161e:	85 e1       	ldi	r24, 0x15	; 21
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    1626:	86 e1       	ldi	r24, 0x16	; 22
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    162e:	60 c0       	rjmp	.+192    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 6:
			Dio_write(PORTC_0,HIGH);
    1630:	80 e1       	ldi	r24, 0x10	; 16
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    1638:	82 e1       	ldi	r24, 0x12	; 18
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    1640:	83 e1       	ldi	r24, 0x13	; 19
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_4,HIGH);
    1648:	84 e1       	ldi	r24, 0x14	; 20
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_5,HIGH);
    1650:	85 e1       	ldi	r24, 0x15	; 21
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    1658:	86 e1       	ldi	r24, 0x16	; 22
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1660:	47 c0       	rjmp	.+142    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 7:
			Dio_write(PORTC_0,HIGH);
    1662:	80 e1       	ldi	r24, 0x10	; 16
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_1,HIGH);
    166a:	81 e1       	ldi	r24, 0x11	; 17
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    1672:	82 e1       	ldi	r24, 0x12	; 18
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    167a:	3a c0       	rjmp	.+116    	; 0x16f0 <SevenSegment+0x256>
			break;
	case 8:
			Dio_write(PORTC_0,HIGH);
    167c:	80 e1       	ldi	r24, 0x10	; 16
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_1,HIGH);
    1684:	81 e1       	ldi	r24, 0x11	; 17
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    168c:	82 e1       	ldi	r24, 0x12	; 18
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    1694:	83 e1       	ldi	r24, 0x13	; 19
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_4,HIGH);
    169c:	84 e1       	ldi	r24, 0x14	; 20
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_5,HIGH);
    16a4:	85 e1       	ldi	r24, 0x15	; 21
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    16ac:	86 e1       	ldi	r24, 0x16	; 22
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    16b4:	1d c0       	rjmp	.+58     	; 0x16f0 <SevenSegment+0x256>
			break;
	case 9:
			Dio_write(PORTC_0,HIGH);
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_1,HIGH);
    16be:	81 e1       	ldi	r24, 0x11	; 17
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_2,HIGH);
    16c6:	82 e1       	ldi	r24, 0x12	; 18
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_3,HIGH);
    16ce:	83 e1       	ldi	r24, 0x13	; 19
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_5,HIGH);
    16d6:	85 e1       	ldi	r24, 0x15	; 21
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
			Dio_write(PORTC_6,HIGH);
    16de:	86 e1       	ldi	r24, 0x16	; 22
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <SevenSegment+0x256>
			break;
	default:
			Dio_write(PORTC_0,HIGH);
    16e8:	80 e1       	ldi	r24, 0x10	; 16
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	}
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <SevenSegmentWithIndex>:


void SevenSegmentWithIndex(unsigned char num,unsigned char id){
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <SevenSegmentWithIndex+0x6>
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	6a 83       	std	Y+2, r22	; 0x02

}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <Lcd_Init>:


static void Trigger_Enable(void);  //ProtoType of static is defined in source file itself(Private declaration)
static void Set_Cursor_Pos(uint8 row,uint8 column);

void Lcd_Init(){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62

	Lcd_sendCmd(fourbit_mode);  /* Go into 4-bit operating mode*/
    171c:	83 e3       	ldi	r24, 0x33	; 51
    171e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	Lcd_sendCmd(fourbit_mode11);	/* Go into 4-bit operating mode*/
    1722:	82 e3       	ldi	r24, 0x32	; 50
    1724:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	Lcd_sendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    1728:	88 e2       	ldi	r24, 0x28	; 40
    172a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	Lcd_sendCmd(CursorOFF);  /* Display on cursor off */
    172e:	8c e0       	ldi	r24, 0x0C	; 12
    1730:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	Lcd_sendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    1734:	86 e0       	ldi	r24, 0x06	; 6
    1736:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	Lcd_sendCmd(CLR_Display);  /* Clear display screen */
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>

}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <Lcd_sendCmd>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */


void Lcd_sendCmd(unsigned char cmd){
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	89 83       	std	Y+1, r24	; 0x01
	Dio_write(RS, LOW);
    1752:	89 e0       	ldi	r24, 0x09	; 9
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    175a:	8a e0       	ldi	r24, 0x0A	; 10
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
	(GET_BIT(cmd,7)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	88 23       	and	r24, r24
    1766:	2c f4       	brge	.+10     	; 0x1772 <Lcd_sendCmd+0x2c>
    1768:	87 e0       	ldi	r24, 0x07	; 7
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1770:	04 c0       	rjmp	.+8      	; 0x177a <Lcd_sendCmd+0x34>
    1772:	87 e0       	ldi	r24, 0x07	; 7
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(cmd,6)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	82 95       	swap	r24
    177e:	86 95       	lsr	r24
    1780:	86 95       	lsr	r24
    1782:	83 70       	andi	r24, 0x03	; 3
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	90 70       	andi	r25, 0x00	; 0
    178c:	88 23       	and	r24, r24
    178e:	29 f0       	breq	.+10     	; 0x179a <Lcd_sendCmd+0x54>
    1790:	86 e0       	ldi	r24, 0x06	; 6
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <Lcd_sendCmd+0x5c>
    179a:	86 e0       	ldi	r24, 0x06	; 6
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(cmd,5)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	82 95       	swap	r24
    17a6:	86 95       	lsr	r24
    17a8:	87 70       	andi	r24, 0x07	; 7
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	88 23       	and	r24, r24
    17b4:	29 f0       	breq	.+10     	; 0x17c0 <Lcd_sendCmd+0x7a>
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <Lcd_sendCmd+0x82>
    17c0:	85 e0       	ldi	r24, 0x05	; 5
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(cmd,4)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	82 95       	swap	r24
    17cc:	8f 70       	andi	r24, 0x0F	; 15
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	90 70       	andi	r25, 0x00	; 0
    17d6:	88 23       	and	r24, r24
    17d8:	29 f0       	breq	.+10     	; 0x17e4 <Lcd_sendCmd+0x9e>
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <Lcd_sendCmd+0xa6>
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    17ec:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Trigger_Enable>
	(GET_BIT(cmd,3)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	86 95       	lsr	r24
    17f4:	86 95       	lsr	r24
    17f6:	86 95       	lsr	r24
    17f8:	88 2f       	mov	r24, r24
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	88 23       	and	r24, r24
    1802:	29 f0       	breq	.+10     	; 0x180e <Lcd_sendCmd+0xc8>
    1804:	87 e0       	ldi	r24, 0x07	; 7
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <Lcd_sendCmd+0xd0>
    180e:	87 e0       	ldi	r24, 0x07	; 7
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(cmd,2)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	86 95       	lsr	r24
    181a:	86 95       	lsr	r24
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	90 70       	andi	r25, 0x00	; 0
    1824:	88 23       	and	r24, r24
    1826:	29 f0       	breq	.+10     	; 0x1832 <Lcd_sendCmd+0xec>
    1828:	86 e0       	ldi	r24, 0x06	; 6
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1830:	04 c0       	rjmp	.+8      	; 0x183a <Lcd_sendCmd+0xf4>
    1832:	86 e0       	ldi	r24, 0x06	; 6
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(cmd,1)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	86 95       	lsr	r24
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	90 70       	andi	r25, 0x00	; 0
    1846:	88 23       	and	r24, r24
    1848:	29 f0       	breq	.+10     	; 0x1854 <Lcd_sendCmd+0x10e>
    184a:	85 e0       	ldi	r24, 0x05	; 5
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1852:	04 c0       	rjmp	.+8      	; 0x185c <Lcd_sendCmd+0x116>
    1854:	85 e0       	ldi	r24, 0x05	; 5
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(cmd,0)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	81 70       	andi	r24, 0x01	; 1
    1864:	90 70       	andi	r25, 0x00	; 0
    1866:	88 23       	and	r24, r24
    1868:	29 f0       	breq	.+10     	; 0x1874 <Lcd_sendCmd+0x12e>
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1872:	04 c0       	rjmp	.+8      	; 0x187c <Lcd_sendCmd+0x136>
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    187c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Trigger_Enable>
}
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <Lcd_sendChar>:
void Lcd_sendChar(unsigned char data){
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
	Dio_write(RS, HIGH);
    1894:	89 e0       	ldi	r24, 0x09	; 9
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    189c:	8a e0       	ldi	r24, 0x0A	; 10
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,7)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	88 23       	and	r24, r24
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <Lcd_sendChar+0x2c>
    18aa:	87 e0       	ldi	r24, 0x07	; 7
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <Lcd_sendChar+0x34>
    18b4:	87 e0       	ldi	r24, 0x07	; 7
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,6)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	82 95       	swap	r24
    18c0:	86 95       	lsr	r24
    18c2:	86 95       	lsr	r24
    18c4:	83 70       	andi	r24, 0x03	; 3
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	81 70       	andi	r24, 0x01	; 1
    18cc:	90 70       	andi	r25, 0x00	; 0
    18ce:	88 23       	and	r24, r24
    18d0:	29 f0       	breq	.+10     	; 0x18dc <Lcd_sendChar+0x54>
    18d2:	86 e0       	ldi	r24, 0x06	; 6
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <Lcd_sendChar+0x5c>
    18dc:	86 e0       	ldi	r24, 0x06	; 6
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,5)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	82 95       	swap	r24
    18e8:	86 95       	lsr	r24
    18ea:	87 70       	andi	r24, 0x07	; 7
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	90 70       	andi	r25, 0x00	; 0
    18f4:	88 23       	and	r24, r24
    18f6:	29 f0       	breq	.+10     	; 0x1902 <Lcd_sendChar+0x7a>
    18f8:	85 e0       	ldi	r24, 0x05	; 5
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1900:	04 c0       	rjmp	.+8      	; 0x190a <Lcd_sendChar+0x82>
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,4)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	82 95       	swap	r24
    190e:	8f 70       	andi	r24, 0x0F	; 15
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	90 70       	andi	r25, 0x00	; 0
    1918:	88 23       	and	r24, r24
    191a:	29 f0       	breq	.+10     	; 0x1926 <Lcd_sendChar+0x9e>
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1924:	04 c0       	rjmp	.+8      	; 0x192e <Lcd_sendChar+0xa6>
    1926:	84 e0       	ldi	r24, 0x04	; 4
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    192e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Trigger_Enable>
	(GET_BIT(data,3)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	86 95       	lsr	r24
    1936:	86 95       	lsr	r24
    1938:	86 95       	lsr	r24
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	88 23       	and	r24, r24
    1944:	29 f0       	breq	.+10     	; 0x1950 <Lcd_sendChar+0xc8>
    1946:	87 e0       	ldi	r24, 0x07	; 7
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <Lcd_sendChar+0xd0>
    1950:	87 e0       	ldi	r24, 0x07	; 7
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,2)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	86 95       	lsr	r24
    195c:	86 95       	lsr	r24
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	90 70       	andi	r25, 0x00	; 0
    1966:	88 23       	and	r24, r24
    1968:	29 f0       	breq	.+10     	; 0x1974 <Lcd_sendChar+0xec>
    196a:	86 e0       	ldi	r24, 0x06	; 6
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1972:	04 c0       	rjmp	.+8      	; 0x197c <Lcd_sendChar+0xf4>
    1974:	86 e0       	ldi	r24, 0x06	; 6
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,1)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	86 95       	lsr	r24
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	88 23       	and	r24, r24
    198a:	29 f0       	breq	.+10     	; 0x1996 <Lcd_sendChar+0x10e>
    198c:	85 e0       	ldi	r24, 0x05	; 5
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1994:	04 c0       	rjmp	.+8      	; 0x199e <Lcd_sendChar+0x116>
    1996:	85 e0       	ldi	r24, 0x05	; 5
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	(GET_BIT(data,0)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	81 70       	andi	r24, 0x01	; 1
    19a6:	90 70       	andi	r25, 0x00	; 0
    19a8:	88 23       	and	r24, r24
    19aa:	29 f0       	breq	.+10     	; 0x19b6 <Lcd_sendChar+0x12e>
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <Lcd_sendChar+0x136>
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    19be:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Trigger_Enable>
}
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <Lcd_sendString>:
void Lcd_sendString(char *data){   //I changed the argument type passed to char
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <Lcd_sendString+0xa>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <Lcd_sendString+0xc>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
									//Cuz I get a warning
	Dio_write(RS, HIGH);
    19de:	89 e0       	ldi	r24, 0x09	; 9
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    19e6:	8a e0       	ldi	r24, 0x0A	; 10
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>

	int i=0;
    19ee:	1a 82       	std	Y+2, r1	; 0x02
    19f0:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<strlen(data) ;i++){
    19f2:	1a 82       	std	Y+2, r1	; 0x02
    19f4:	19 82       	std	Y+1, r1	; 0x01
    19f6:	cc c0       	rjmp	.+408    	; 0x1b90 <Lcd_sendString+0x1c6>
		(GET_BIT(*(data+i),7)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    19f8:	29 81       	ldd	r18, Y+1	; 0x01
    19fa:	3a 81       	ldd	r19, Y+2	; 0x02
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	fc 01       	movw	r30, r24
    1a02:	e2 0f       	add	r30, r18
    1a04:	f3 1f       	adc	r31, r19
    1a06:	80 81       	ld	r24, Z
    1a08:	88 23       	and	r24, r24
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <Lcd_sendString+0x4c>
    1a0c:	87 e0       	ldi	r24, 0x07	; 7
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <Lcd_sendString+0x54>
    1a16:	87 e0       	ldi	r24, 0x07	; 7
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		(GET_BIT(*(data+i),6)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	fc 01       	movw	r30, r24
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	80 81       	ld	r24, Z
    1a2e:	82 95       	swap	r24
    1a30:	86 95       	lsr	r24
    1a32:	86 95       	lsr	r24
    1a34:	83 70       	andi	r24, 0x03	; 3
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	81 70       	andi	r24, 0x01	; 1
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	88 23       	and	r24, r24
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <Lcd_sendString+0x82>
    1a42:	86 e0       	ldi	r24, 0x06	; 6
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <Lcd_sendString+0x8a>
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		(GET_BIT(*(data+i),5)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    1a54:	29 81       	ldd	r18, Y+1	; 0x01
    1a56:	3a 81       	ldd	r19, Y+2	; 0x02
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	e2 0f       	add	r30, r18
    1a60:	f3 1f       	adc	r31, r19
    1a62:	80 81       	ld	r24, Z
    1a64:	82 95       	swap	r24
    1a66:	86 95       	lsr	r24
    1a68:	87 70       	andi	r24, 0x07	; 7
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	88 23       	and	r24, r24
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <Lcd_sendString+0xb6>
    1a76:	85 e0       	ldi	r24, 0x05	; 5
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <Lcd_sendString+0xbe>
    1a80:	85 e0       	ldi	r24, 0x05	; 5
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		(GET_BIT(*(data+i),4)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    1a88:	29 81       	ldd	r18, Y+1	; 0x01
    1a8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	fc 01       	movw	r30, r24
    1a92:	e2 0f       	add	r30, r18
    1a94:	f3 1f       	adc	r31, r19
    1a96:	80 81       	ld	r24, Z
    1a98:	82 95       	swap	r24
    1a9a:	8f 70       	andi	r24, 0x0F	; 15
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	90 70       	andi	r25, 0x00	; 0
    1aa4:	88 23       	and	r24, r24
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <Lcd_sendString+0xe8>
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <Lcd_sendString+0xf0>
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		Trigger_Enable();
    1aba:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Trigger_Enable>
		(GET_BIT(*(data+i),3)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    1abe:	29 81       	ldd	r18, Y+1	; 0x01
    1ac0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	80 81       	ld	r24, Z
    1ace:	86 95       	lsr	r24
    1ad0:	86 95       	lsr	r24
    1ad2:	86 95       	lsr	r24
    1ad4:	88 2f       	mov	r24, r24
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	81 70       	andi	r24, 0x01	; 1
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	88 23       	and	r24, r24
    1ade:	29 f0       	breq	.+10     	; 0x1aea <Lcd_sendString+0x120>
    1ae0:	87 e0       	ldi	r24, 0x07	; 7
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1ae8:	04 c0       	rjmp	.+8      	; 0x1af2 <Lcd_sendString+0x128>
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		(GET_BIT(*(data+i),2)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    1af2:	29 81       	ldd	r18, Y+1	; 0x01
    1af4:	3a 81       	ldd	r19, Y+2	; 0x02
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	fc 01       	movw	r30, r24
    1afc:	e2 0f       	add	r30, r18
    1afe:	f3 1f       	adc	r31, r19
    1b00:	80 81       	ld	r24, Z
    1b02:	86 95       	lsr	r24
    1b04:	86 95       	lsr	r24
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	81 70       	andi	r24, 0x01	; 1
    1b0c:	90 70       	andi	r25, 0x00	; 0
    1b0e:	88 23       	and	r24, r24
    1b10:	29 f0       	breq	.+10     	; 0x1b1c <Lcd_sendString+0x152>
    1b12:	86 e0       	ldi	r24, 0x06	; 6
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <Lcd_sendString+0x15a>
    1b1c:	86 e0       	ldi	r24, 0x06	; 6
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		(GET_BIT(*(data+i),1)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    1b24:	29 81       	ldd	r18, Y+1	; 0x01
    1b26:	3a 81       	ldd	r19, Y+2	; 0x02
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e2 0f       	add	r30, r18
    1b30:	f3 1f       	adc	r31, r19
    1b32:	80 81       	ld	r24, Z
    1b34:	86 95       	lsr	r24
    1b36:	88 2f       	mov	r24, r24
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	81 70       	andi	r24, 0x01	; 1
    1b3c:	90 70       	andi	r25, 0x00	; 0
    1b3e:	88 23       	and	r24, r24
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <Lcd_sendString+0x182>
    1b42:	85 e0       	ldi	r24, 0x05	; 5
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <Lcd_sendString+0x18a>
    1b4c:	85 e0       	ldi	r24, 0x05	; 5
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		(GET_BIT(*(data+i),0)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	3a 81       	ldd	r19, Y+2	; 0x02
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e2 0f       	add	r30, r18
    1b60:	f3 1f       	adc	r31, r19
    1b62:	80 81       	ld	r24, Z
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	90 70       	andi	r25, 0x00	; 0
    1b6c:	88 23       	and	r24, r24
    1b6e:	29 f0       	breq	.+10     	; 0x1b7a <Lcd_sendString+0x1b0>
    1b70:	84 e0       	ldi	r24, 0x04	; 4
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <Lcd_sendString+0x1b8>
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
		Trigger_Enable();
    1b82:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Trigger_Enable>
									//Cuz I get a warning
	Dio_write(RS, HIGH);
	Dio_write(RW, LOW);

	int i=0;
	for(i=0 ; i<strlen(data) ;i++){
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	09 81       	ldd	r16, Y+1	; 0x01
    1b92:	1a 81       	ldd	r17, Y+2	; 0x02
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	0e 94 b2 21 	call	0x4364	; 0x4364 <strlen>
    1b9c:	08 17       	cp	r16, r24
    1b9e:	19 07       	cpc	r17, r25
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <Lcd_sendString+0x1da>
    1ba2:	2a cf       	rjmp	.-428    	; 0x19f8 <Lcd_sendString+0x2e>
		(GET_BIT(*(data+i),2)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
		(GET_BIT(*(data+i),1)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
		(GET_BIT(*(data+i),0)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
		Trigger_Enable();
	}
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <Lcd_sendString_xy>:

void Lcd_sendString_xy(char *data,unsigned char row,unsigned char col){
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <Lcd_sendString_xy+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <Lcd_sendString_xy+0x8>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	6b 83       	std	Y+3, r22	; 0x03
    1bc8:	4c 83       	std	Y+4, r20	; 0x04
	Dio_write(RS, HIGH);
    1bca:	89 e0       	ldi	r24, 0x09	; 9
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    1bd2:	8a e0       	ldi	r24, 0x0A	; 10
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>


		for(int j=1;j<=col;j++){
			Lcd_sendCmd(ShiftRight);
		}*/
		Set_Cursor_Pos(row,col);
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	6c 81       	ldd	r22, Y+4	; 0x04
    1bde:	0e 94 47 12 	call	0x248e	; 0x248e <Set_Cursor_Pos>
		Lcd_sendString(data);
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <Lcd_sendString>

}
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <Trigger_Enable>:

static void Trigger_Enable(void){  //We make it static cuz we won't use it anywhere but here
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	e0 97       	sbiw	r28, 0x30	; 48
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
	Dio_write(EN,HIGH);
    1c0c:	8b e0       	ldi	r24, 0x0B	; 11
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e2       	ldi	r26, 0x20	; 32
    1c1a:	b1 e4       	ldi	r27, 0x41	; 65
    1c1c:	8d a7       	std	Y+45, r24	; 0x2d
    1c1e:	9e a7       	std	Y+46, r25	; 0x2e
    1c20:	af a7       	std	Y+47, r26	; 0x2f
    1c22:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c24:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c26:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2c:	2b ea       	ldi	r18, 0xAB	; 171
    1c2e:	3a ea       	ldi	r19, 0xAA	; 170
    1c30:	4a e2       	ldi	r20, 0x2A	; 42
    1c32:	50 e4       	ldi	r21, 0x40	; 64
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	89 a7       	std	Y+41, r24	; 0x29
    1c3e:	9a a7       	std	Y+42, r25	; 0x2a
    1c40:	ab a7       	std	Y+43, r26	; 0x2b
    1c42:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c44:	69 a5       	ldd	r22, Y+41	; 0x29
    1c46:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	1c f4       	brge	.+6      	; 0x1c62 <Trigger_Enable+0x6a>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	88 a7       	std	Y+40, r24	; 0x28
    1c60:	91 c0       	rjmp	.+290    	; 0x1d84 <Trigger_Enable+0x18c>
	else if (__tmp > 255)
    1c62:	69 a5       	ldd	r22, Y+41	; 0x29
    1c64:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <Trigger_Enable+0x84>
    1c7a:	7b c0       	rjmp	.+246    	; 0x1d72 <Trigger_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    1c7c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c7e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c82:	98 a9       	ldd	r25, Y+48	; 0x30
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a e7       	ldi	r20, 0x7A	; 122
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8c a3       	std	Y+36, r24	; 0x24
    1c96:	9d a3       	std	Y+37, r25	; 0x25
    1c98:	ae a3       	std	Y+38, r26	; 0x26
    1c9a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6c a1       	ldd	r22, Y+36	; 0x24
    1c9e:	7d a1       	ldd	r23, Y+37	; 0x25
    1ca0:	8e a1       	ldd	r24, Y+38	; 0x26
    1ca2:	9f a1       	ldd	r25, Y+39	; 0x27
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	88 a3       	std	Y+32, r24	; 0x20
    1cb6:	99 a3       	std	Y+33, r25	; 0x21
    1cb8:	aa a3       	std	Y+34, r26	; 0x22
    1cba:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1cbc:	68 a1       	ldd	r22, Y+32	; 0x20
    1cbe:	79 a1       	ldd	r23, Y+33	; 0x21
    1cc0:	8a a1       	ldd	r24, Y+34	; 0x22
    1cc2:	9b a1       	ldd	r25, Y+35	; 0x23
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <Trigger_Enable+0xe6>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9f 8f       	std	Y+31, r25	; 0x1f
    1cda:	8e 8f       	std	Y+30, r24	; 0x1e
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <Trigger_Enable+0x164>
	else if (__tmp > 65535)
    1cde:	68 a1       	ldd	r22, Y+32	; 0x20
    1ce0:	79 a1       	ldd	r23, Y+33	; 0x21
    1ce2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ce4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <Trigger_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6c a1       	ldd	r22, Y+36	; 0x24
    1cf8:	7d a1       	ldd	r23, Y+37	; 0x25
    1cfa:	8e a1       	ldd	r24, Y+38	; 0x26
    1cfc:	9f a1       	ldd	r25, Y+39	; 0x27
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d1c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <Trigger_Enable+0x146>
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9d 8f       	std	Y+29, r25	; 0x1d
    1d26:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <Trigger_Enable+0x134>
    1d30:	9d 8f       	std	Y+29, r25	; 0x1d
    1d32:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9f 8f       	std	Y+31, r25	; 0x1f
    1d3c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <Trigger_Enable+0x128>
    1d46:	24 c0       	rjmp	.+72     	; 0x1d90 <Trigger_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	68 a1       	ldd	r22, Y+32	; 0x20
    1d4a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d4c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d4e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9f 8f       	std	Y+31, r25	; 0x1f
    1d5a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d60:	9b 8f       	std	Y+27, r25	; 0x1b
    1d62:	8a 8f       	std	Y+26, r24	; 0x1a
    1d64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d66:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <Trigger_Enable+0x170>
    1d6c:	9b 8f       	std	Y+27, r25	; 0x1b
    1d6e:	8a 8f       	std	Y+26, r24	; 0x1a
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <Trigger_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d72:	69 a5       	ldd	r22, Y+41	; 0x29
    1d74:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	88 a7       	std	Y+40, r24	; 0x28
    1d84:	88 a5       	ldd	r24, Y+40	; 0x28
    1d86:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d88:	89 8d       	ldd	r24, Y+25	; 0x19
    1d8a:	8a 95       	dec	r24
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <Trigger_Enable+0x192>
    1d8e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(EN,LOW);
    1d90:	8b e0       	ldi	r24, 0x0B	; 11
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	aa ef       	ldi	r26, 0xFA	; 250
    1d9e:	b4 e4       	ldi	r27, 0x44	; 68
    1da0:	8d 8b       	std	Y+21, r24	; 0x15
    1da2:	9e 8b       	std	Y+22, r25	; 0x16
    1da4:	af 8b       	std	Y+23, r26	; 0x17
    1da6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1da8:	6d 89       	ldd	r22, Y+21	; 0x15
    1daa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dac:	8f 89       	ldd	r24, Y+23	; 0x17
    1dae:	98 8d       	ldd	r25, Y+24	; 0x18
    1db0:	2b ea       	ldi	r18, 0xAB	; 171
    1db2:	3a ea       	ldi	r19, 0xAA	; 170
    1db4:	4a e2       	ldi	r20, 0x2A	; 42
    1db6:	50 e4       	ldi	r21, 0x40	; 64
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	89 8b       	std	Y+17, r24	; 0x11
    1dc2:	9a 8b       	std	Y+18, r25	; 0x12
    1dc4:	ab 8b       	std	Y+19, r26	; 0x13
    1dc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dc8:	69 89       	ldd	r22, Y+17	; 0x11
    1dca:	7a 89       	ldd	r23, Y+18	; 0x12
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	1c f4       	brge	.+6      	; 0x1de6 <Trigger_Enable+0x1ee>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	88 8b       	std	Y+16, r24	; 0x10
    1de4:	91 c0       	rjmp	.+290    	; 0x1f08 <Trigger_Enable+0x310>
	else if (__tmp > 255)
    1de6:	69 89       	ldd	r22, Y+17	; 0x11
    1de8:	7a 89       	ldd	r23, Y+18	; 0x12
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	53 e4       	ldi	r21, 0x43	; 67
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	0c f0       	brlt	.+2      	; 0x1e00 <Trigger_Enable+0x208>
    1dfe:	7b c0       	rjmp	.+246    	; 0x1ef6 <Trigger_Enable+0x2fe>
	{
		_delay_ms(__us / 1000.0);
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8c 87       	std	Y+12, r24	; 0x0c
    1e1a:	9d 87       	std	Y+13, r25	; 0x0d
    1e1c:	ae 87       	std	Y+14, r26	; 0x0e
    1e1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e22:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e24:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e26:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	88 87       	std	Y+8, r24	; 0x08
    1e3a:	99 87       	std	Y+9, r25	; 0x09
    1e3c:	aa 87       	std	Y+10, r26	; 0x0a
    1e3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e40:	68 85       	ldd	r22, Y+8	; 0x08
    1e42:	79 85       	ldd	r23, Y+9	; 0x09
    1e44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <Trigger_Enable+0x26a>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9f 83       	std	Y+7, r25	; 0x07
    1e5e:	8e 83       	std	Y+6, r24	; 0x06
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <Trigger_Enable+0x2e8>
	else if (__tmp > 65535)
    1e62:	68 85       	ldd	r22, Y+8	; 0x08
    1e64:	79 85       	ldd	r23, Y+9	; 0x09
    1e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <Trigger_Enable+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e80:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9f 83       	std	Y+7, r25	; 0x07
    1ea0:	8e 83       	std	Y+6, r24	; 0x06
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <Trigger_Enable+0x2ca>
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9d 83       	std	Y+5, r25	; 0x05
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <Trigger_Enable+0x2b8>
    1eb4:	9d 83       	std	Y+5, r25	; 0x05
    1eb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eba:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9f 83       	std	Y+7, r25	; 0x07
    1ec0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <Trigger_Enable+0x2ac>
    1eca:	24 c0       	rjmp	.+72     	; 0x1f14 <Trigger_Enable+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	68 85       	ldd	r22, Y+8	; 0x08
    1ece:	79 85       	ldd	r23, Y+9	; 0x09
    1ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9f 83       	std	Y+7, r25	; 0x07
    1ede:	8e 83       	std	Y+6, r24	; 0x06
    1ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee4:	9b 83       	std	Y+3, r25	; 0x03
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <Trigger_Enable+0x2f4>
    1ef0:	9b 83       	std	Y+3, r25	; 0x03
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <Trigger_Enable+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ef6:	69 89       	ldd	r22, Y+17	; 0x11
    1ef8:	7a 89       	ldd	r23, Y+18	; 0x12
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	9c 89       	ldd	r25, Y+20	; 0x14
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	88 8b       	std	Y+16, r24	; 0x10
    1f08:	88 89       	ldd	r24, Y+16	; 0x10
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	8a 95       	dec	r24
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <Trigger_Enable+0x316>
    1f12:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
}
    1f14:	e0 96       	adiw	r28, 0x30	; 48
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <Lcd_displayNum>:

//A function to display Numbers instead of characters
void Lcd_displayNum(uint16 num)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	9e 87       	std	Y+14, r25	; 0x0e
    1f3c:	8d 87       	std	Y+13, r24	; 0x0d
	Dio_write(RS, HIGH);
    1f3e:	89 e0       	ldi	r24, 0x09	; 9
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    1f46:	8a e0       	ldi	r24, 0x0A	; 10
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>

	 uint8 ch[10],i=0,j=0;
    1f4e:	1a 82       	std	Y+2, r1	; 0x02
    1f50:	19 82       	std	Y+1, r1	; 0x01
		   if(num == 0)
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	11 f5       	brne	.+68     	; 0x1f9e <Lcd_displayNum+0x78>
		   {
			   Lcd_sendChar('0');
    1f5a:	80 e3       	ldi	r24, 0x30	; 48
    1f5c:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
    1f60:	39 c0       	rjmp	.+114    	; 0x1fd4 <Lcd_displayNum+0xae>
		   }
		   else
		   {
			   while(num)
			   {
					ch[i] = num % 10 + '0';  //To convert int to char
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	e8 2f       	mov	r30, r24
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	2a e0       	ldi	r18, 0x0A	; 10
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	b9 01       	movw	r22, r18
    1f72:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__udivmodhi4>
    1f76:	28 2f       	mov	r18, r24
    1f78:	20 5d       	subi	r18, 0xD0	; 208
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	03 96       	adiw	r24, 0x03	; 3
    1f7e:	e8 0f       	add	r30, r24
    1f80:	f9 1f       	adc	r31, r25
    1f82:	20 83       	st	Z, r18
					num /= 10;
    1f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f88:	2a e0       	ldi	r18, 0x0A	; 10
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__udivmodhi4>
    1f92:	cb 01       	movw	r24, r22
    1f94:	9e 87       	std	Y+14, r25	; 0x0e
    1f96:	8d 87       	std	Y+13, r24	; 0x0d
					i++;
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	8f 5f       	subi	r24, 0xFF	; 255
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   Lcd_sendChar('0');
		   }
		   else
		   {
			   while(num)
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	f1 f6       	brne	.-68     	; 0x1f62 <Lcd_displayNum+0x3c>
			   {
					ch[i] = num % 10 + '0';  //To convert int to char
					num /= 10;
					i++;
			   } //Thus number entered is reversed so, we want to display it correctly
			   for(j=i;j>0;j--)
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	11 c0       	rjmp	.+34     	; 0x1fce <Lcd_displayNum+0xa8>
			   {
				   Lcd_sendChar(ch[j-1]);
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 01       	movw	r18, r24
    1fb4:	21 50       	subi	r18, 0x01	; 1
    1fb6:	30 40       	sbci	r19, 0x00	; 0
    1fb8:	ce 01       	movw	r24, r28
    1fba:	03 96       	adiw	r24, 0x03	; 3
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	e2 0f       	add	r30, r18
    1fc0:	f3 1f       	adc	r31, r19
    1fc2:	80 81       	ld	r24, Z
    1fc4:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
			   {
					ch[i] = num % 10 + '0';  //To convert int to char
					num /= 10;
					i++;
			   } //Thus number entered is reversed so, we want to display it correctly
			   for(j=i;j>0;j--)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	81 50       	subi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	88 23       	and	r24, r24
    1fd2:	61 f7       	brne	.-40     	; 0x1fac <Lcd_displayNum+0x86>
			   {
				   Lcd_sendChar(ch[j-1]);
			   }
		   }
}
    1fd4:	2e 96       	adiw	r28, 0x0e	; 14
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <Lcd_displayNum_xy>:

void Lcd_displayNum_xy(uint16 num,unsigned char row,unsigned char col){
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	a2 97       	sbiw	r28, 0x22	; 34
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	98 a3       	std	Y+32, r25	; 0x20
    1ffc:	8f 8f       	std	Y+31, r24	; 0x1f
    1ffe:	69 a3       	std	Y+33, r22	; 0x21
    2000:	4a a3       	std	Y+34, r20	; 0x22

	Dio_write(RS, HIGH);
    2002:	89 e0       	ldi	r24, 0x09	; 9
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    200a:	8a e0       	ldi	r24, 0x0A	; 10
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>


	if(row == 1){
    2012:	89 a1       	ldd	r24, Y+33	; 0x21
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	09 f0       	breq	.+2      	; 0x201a <Lcd_displayNum_xy+0x34>
    2018:	76 c0       	rjmp	.+236    	; 0x2106 <Lcd_displayNum_xy+0x120>
		Lcd_sendCmd(Force1stline);
    201a:	80 e8       	ldi	r24, 0x80	; 128
    201c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	89 8f       	std	Y+25, r24	; 0x19
    202a:	9a 8f       	std	Y+26, r25	; 0x1a
    202c:	ab 8f       	std	Y+27, r26	; 0x1b
    202e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	69 8d       	ldd	r22, Y+25	; 0x19
    2032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a ef       	ldi	r20, 0xFA	; 250
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8d 8b       	std	Y+21, r24	; 0x15
    204a:	9e 8b       	std	Y+22, r25	; 0x16
    204c:	af 8b       	std	Y+23, r26	; 0x17
    204e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2050:	6d 89       	ldd	r22, Y+21	; 0x15
    2052:	7e 89       	ldd	r23, Y+22	; 0x16
    2054:	8f 89       	ldd	r24, Y+23	; 0x17
    2056:	98 8d       	ldd	r25, Y+24	; 0x18
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <Lcd_displayNum_xy+0x8c>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9c 8b       	std	Y+20, r25	; 0x14
    206e:	8b 8b       	std	Y+19, r24	; 0x13
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <Lcd_displayNum_xy+0x10a>
	else if (__tmp > 65535)
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <Lcd_displayNum_xy+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	69 8d       	ldd	r22, Y+25	; 0x19
    208c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    208e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9c 8b       	std	Y+20, r25	; 0x14
    20b0:	8b 8b       	std	Y+19, r24	; 0x13
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <Lcd_displayNum_xy+0xec>
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9a 8b       	std	Y+18, r25	; 0x12
    20ba:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20bc:	89 89       	ldd	r24, Y+17	; 0x11
    20be:	9a 89       	ldd	r25, Y+18	; 0x12
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <Lcd_displayNum_xy+0xda>
    20c4:	9a 8b       	std	Y+18, r25	; 0x12
    20c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ca:	9c 89       	ldd	r25, Y+20	; 0x14
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <Lcd_displayNum_xy+0xce>
    20da:	8e c0       	rjmp	.+284    	; 0x21f8 <Lcd_displayNum_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	6d 89       	ldd	r22, Y+21	; 0x15
    20de:	7e 89       	ldd	r23, Y+22	; 0x16
    20e0:	8f 89       	ldd	r24, Y+23	; 0x17
    20e2:	98 8d       	ldd	r25, Y+24	; 0x18
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9c 8b       	std	Y+20, r25	; 0x14
    20ee:	8b 8b       	std	Y+19, r24	; 0x13
    20f0:	8b 89       	ldd	r24, Y+19	; 0x13
    20f2:	9c 89       	ldd	r25, Y+20	; 0x14
    20f4:	98 8b       	std	Y+16, r25	; 0x10
    20f6:	8f 87       	std	Y+15, r24	; 0x0f
    20f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fa:	98 89       	ldd	r25, Y+16	; 0x10
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <Lcd_displayNum_xy+0x116>
    2100:	98 8b       	std	Y+16, r25	; 0x10
    2102:	8f 87       	std	Y+15, r24	; 0x0f
    2104:	79 c0       	rjmp	.+242    	; 0x21f8 <Lcd_displayNum_xy+0x212>
		_delay_ms(1);
	}else if(row == 2){
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	09 f0       	breq	.+2      	; 0x210e <Lcd_displayNum_xy+0x128>
    210c:	75 c0       	rjmp	.+234    	; 0x21f8 <Lcd_displayNum_xy+0x212>
		Lcd_sendCmd(Force2ndline);
    210e:	80 ec       	ldi	r24, 0xC0	; 192
    2110:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e2       	ldi	r26, 0x20	; 32
    211a:	b1 e4       	ldi	r27, 0x41	; 65
    211c:	8b 87       	std	Y+11, r24	; 0x0b
    211e:	9c 87       	std	Y+12, r25	; 0x0c
    2120:	ad 87       	std	Y+13, r26	; 0x0d
    2122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a ef       	ldi	r20, 0xFA	; 250
    2132:	54 e4       	ldi	r21, 0x44	; 68
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8f 83       	std	Y+7, r24	; 0x07
    213e:	98 87       	std	Y+8, r25	; 0x08
    2140:	a9 87       	std	Y+9, r26	; 0x09
    2142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <Lcd_displayNum_xy+0x180>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <Lcd_displayNum_xy+0x1fe>
	else if (__tmp > 65535)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <Lcd_displayNum_xy+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2180:	7c 85       	ldd	r23, Y+12	; 0x0c
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <Lcd_displayNum_xy+0x1e0>
    21a8:	88 ec       	ldi	r24, 0xC8	; 200
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <Lcd_displayNum_xy+0x1ce>
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <Lcd_displayNum_xy+0x1c2>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <Lcd_displayNum_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <Lcd_displayNum_xy+0x20a>
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}


	for(int j=1;j<=col;j++){
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9e 8f       	std	Y+30, r25	; 0x1e
    21fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <Lcd_displayNum_xy+0x22c>
		Lcd_sendCmd(ShiftRight);
    2202:	8c e1       	ldi	r24, 0x1C	; 28
    2204:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
		Lcd_sendCmd(Force2ndline);
		_delay_ms(10);
	}


	for(int j=1;j<=col;j++){
    2208:	8d 8d       	ldd	r24, Y+29	; 0x1d
    220a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	9e 8f       	std	Y+30, r25	; 0x1e
    2210:	8d 8f       	std	Y+29, r24	; 0x1d
    2212:	8a a1       	ldd	r24, Y+34	; 0x22
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    221a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    221c:	28 17       	cp	r18, r24
    221e:	39 07       	cpc	r19, r25
    2220:	84 f7       	brge	.-32     	; 0x2202 <Lcd_displayNum_xy+0x21c>
		Lcd_sendCmd(ShiftRight);
	}

	Lcd_displayNum(num);
    2222:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2224:	98 a1       	ldd	r25, Y+32	; 0x20
    2226:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <Lcd_displayNum>

	}
    222a:	a2 96       	adiw	r28, 0x22	; 34
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <Lcd_sendChar_xy>:

void Lcd_sendChar_xy(unsigned char data,unsigned char row,unsigned char col){
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	a1 97       	sbiw	r28, 0x21	; 33
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	8f 8f       	std	Y+31, r24	; 0x1f
    2252:	68 a3       	std	Y+32, r22	; 0x20
    2254:	49 a3       	std	Y+33, r20	; 0x21
	Dio_write(RS, HIGH);
    2256:	89 e0       	ldi	r24, 0x09	; 9
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(RW, LOW);
    225e:	8a e0       	ldi	r24, 0x0A	; 10
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>


	if(row == 1){
    2266:	88 a1       	ldd	r24, Y+32	; 0x20
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	09 f0       	breq	.+2      	; 0x226e <Lcd_sendChar_xy+0x32>
    226c:	76 c0       	rjmp	.+236    	; 0x235a <Lcd_sendChar_xy+0x11e>
		Lcd_sendCmd(Force1stline);
    226e:	80 e8       	ldi	r24, 0x80	; 128
    2270:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	89 8f       	std	Y+25, r24	; 0x19
    227e:	9a 8f       	std	Y+26, r25	; 0x1a
    2280:	ab 8f       	std	Y+27, r26	; 0x1b
    2282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	69 8d       	ldd	r22, Y+25	; 0x19
    2286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a ef       	ldi	r20, 0xFA	; 250
    2292:	54 e4       	ldi	r21, 0x44	; 68
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8d 8b       	std	Y+21, r24	; 0x15
    229e:	9e 8b       	std	Y+22, r25	; 0x16
    22a0:	af 8b       	std	Y+23, r26	; 0x17
    22a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <Lcd_sendChar_xy+0x8a>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 8b       	std	Y+20, r25	; 0x14
    22c2:	8b 8b       	std	Y+19, r24	; 0x13
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <Lcd_sendChar_xy+0x108>
	else if (__tmp > 65535)
    22c6:	6d 89       	ldd	r22, Y+21	; 0x15
    22c8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ca:	8f 89       	ldd	r24, Y+23	; 0x17
    22cc:	98 8d       	ldd	r25, Y+24	; 0x18
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <Lcd_sendChar_xy+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	69 8d       	ldd	r22, Y+25	; 0x19
    22e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 8b       	std	Y+20, r25	; 0x14
    2304:	8b 8b       	std	Y+19, r24	; 0x13
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <Lcd_sendChar_xy+0xea>
    2308:	88 ec       	ldi	r24, 0xC8	; 200
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	89 8b       	std	Y+17, r24	; 0x11
    2310:	89 89       	ldd	r24, Y+17	; 0x11
    2312:	9a 89       	ldd	r25, Y+18	; 0x12
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <Lcd_sendChar_xy+0xd8>
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	9c 89       	ldd	r25, Y+20	; 0x14
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <Lcd_sendChar_xy+0xcc>
    232e:	8e c0       	rjmp	.+284    	; 0x244c <Lcd_sendChar_xy+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9c 8b       	std	Y+20, r25	; 0x14
    2342:	8b 8b       	std	Y+19, r24	; 0x13
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	98 8b       	std	Y+16, r25	; 0x10
    234a:	8f 87       	std	Y+15, r24	; 0x0f
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	98 89       	ldd	r25, Y+16	; 0x10
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <Lcd_sendChar_xy+0x114>
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f
    2358:	79 c0       	rjmp	.+242    	; 0x244c <Lcd_sendChar_xy+0x210>
		_delay_ms(1);
	}else if(row == 2){
    235a:	88 a1       	ldd	r24, Y+32	; 0x20
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	09 f0       	breq	.+2      	; 0x2362 <Lcd_sendChar_xy+0x126>
    2360:	75 c0       	rjmp	.+234    	; 0x244c <Lcd_sendChar_xy+0x210>
		Lcd_sendCmd(Force2ndline);
    2362:	80 ec       	ldi	r24, 0xC0	; 192
    2364:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e2       	ldi	r26, 0x20	; 32
    236e:	b1 e4       	ldi	r27, 0x41	; 65
    2370:	8b 87       	std	Y+11, r24	; 0x0b
    2372:	9c 87       	std	Y+12, r25	; 0x0c
    2374:	ad 87       	std	Y+13, r26	; 0x0d
    2376:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	6b 85       	ldd	r22, Y+11	; 0x0b
    237a:	7c 85       	ldd	r23, Y+12	; 0x0c
    237c:	8d 85       	ldd	r24, Y+13	; 0x0d
    237e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a ef       	ldi	r20, 0xFA	; 250
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8f 83       	std	Y+7, r24	; 0x07
    2392:	98 87       	std	Y+8, r25	; 0x08
    2394:	a9 87       	std	Y+9, r26	; 0x09
    2396:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <Lcd_sendChar_xy+0x17e>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <Lcd_sendChar_xy+0x1fc>
	else if (__tmp > 65535)
    23ba:	6f 81       	ldd	r22, Y+7	; 0x07
    23bc:	78 85       	ldd	r23, Y+8	; 0x08
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <Lcd_sendChar_xy+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9e 83       	std	Y+6, r25	; 0x06
    23f8:	8d 83       	std	Y+5, r24	; 0x05
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <Lcd_sendChar_xy+0x1de>
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	8b 83       	std	Y+3, r24	; 0x03
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <Lcd_sendChar_xy+0x1cc>
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <Lcd_sendChar_xy+0x1c0>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <Lcd_sendChar_xy+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <Lcd_sendChar_xy+0x208>
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}

	for(int j=1;j<=col;j++){
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9e 8f       	std	Y+30, r25	; 0x1e
    2452:	8d 8f       	std	Y+29, r24	; 0x1d
    2454:	08 c0       	rjmp	.+16     	; 0x2466 <Lcd_sendChar_xy+0x22a>
		Lcd_sendCmd(ShiftRight);
    2456:	8c e1       	ldi	r24, 0x1C	; 28
    2458:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	}else if(row == 2){
		Lcd_sendCmd(Force2ndline);
		_delay_ms(10);
	}

	for(int j=1;j<=col;j++){
    245c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	9e 8f       	std	Y+30, r25	; 0x1e
    2464:	8d 8f       	std	Y+29, r24	; 0x1d
    2466:	89 a1       	ldd	r24, Y+33	; 0x21
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2470:	28 17       	cp	r18, r24
    2472:	39 07       	cpc	r19, r25
    2474:	84 f7       	brge	.-32     	; 0x2456 <Lcd_sendChar_xy+0x21a>
		Lcd_sendCmd(ShiftRight);
	}
	Lcd_sendChar(data);
    2476:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2478:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
}
    247c:	a1 96       	adiw	r28, 0x21	; 33
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <Set_Cursor_Pos>:

static void Set_Cursor_Pos(uint8 row,uint8 column){
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <Set_Cursor_Pos+0x6>
    2494:	00 d0       	rcall	.+0      	; 0x2496 <Set_Cursor_Pos+0x8>
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	81 50       	subi	r24, 0x01	; 1
    24a2:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	3c 83       	std	Y+4, r19	; 0x04
    24ac:	2b 83       	std	Y+3, r18	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	81 30       	cpi	r24, 0x01	; 1
    24b4:	91 05       	cpc	r25, r1
    24b6:	31 f0       	breq	.+12     	; 0x24c4 <Set_Cursor_Pos+0x36>
    24b8:	2b 81       	ldd	r18, Y+3	; 0x03
    24ba:	3c 81       	ldd	r19, Y+4	; 0x04
    24bc:	22 30       	cpi	r18, 0x02	; 2
    24be:	31 05       	cpc	r19, r1
    24c0:	31 f0       	breq	.+12     	; 0x24ce <Set_Cursor_Pos+0x40>
    24c2:	09 c0       	rjmp	.+18     	; 0x24d6 <Set_Cursor_Pos+0x48>
	         case 1: Lcd_sendCmd((0x80 + column)); break;
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	80 58       	subi	r24, 0x80	; 128
    24c8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <Set_Cursor_Pos+0x48>
	         case 2: Lcd_sendCmd((0xc0 + column)); break;
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	80 54       	subi	r24, 0x40	; 64
    24d2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
	         default:;
	}
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <KP_CheckColumns>:
/*
 * Function to check Columns
 *	COLS --> PC4 - PC7
 */

static uint8 KP_CheckColumns(){
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	uint8 ColNumber = KP_RELEASED;
    24ee:	8f ef       	ldi	r24, 0xFF	; 255
    24f0:	89 83       	std	Y+1, r24	; 0x01
	if(Dio_read(PORTC_4) == LOW){  // Why we changed it to LOW ??
    24f2:	84 e1       	ldi	r24, 0x14	; 20
    24f4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Dio_read>
    24f8:	88 23       	and	r24, r24
    24fa:	11 f4       	brne	.+4      	; 0x2500 <KP_CheckColumns+0x1c>
		ColNumber = 0;				//Because of pull up resistor
    24fc:	19 82       	std	Y+1, r1	; 0x01
    24fe:	17 c0       	rjmp	.+46     	; 0x252e <KP_CheckColumns+0x4a>
	}else if(Dio_read(PORTC_5) == LOW){		//It is already high so, we want to see when it will become low
    2500:	85 e1       	ldi	r24, 0x15	; 21
    2502:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Dio_read>
    2506:	88 23       	and	r24, r24
    2508:	19 f4       	brne	.+6      	; 0x2510 <KP_CheckColumns+0x2c>
		ColNumber = 1;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	0f c0       	rjmp	.+30     	; 0x252e <KP_CheckColumns+0x4a>
	}else if(Dio_read(PORTC_6) == LOW){
    2510:	86 e1       	ldi	r24, 0x16	; 22
    2512:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Dio_read>
    2516:	88 23       	and	r24, r24
    2518:	19 f4       	brne	.+6      	; 0x2520 <KP_CheckColumns+0x3c>
		ColNumber = 2;
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	07 c0       	rjmp	.+14     	; 0x252e <KP_CheckColumns+0x4a>
	}else if(Dio_read(PORTC_7) == LOW){
    2520:	87 e1       	ldi	r24, 0x17	; 23
    2522:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Dio_read>
    2526:	88 23       	and	r24, r24
    2528:	11 f4       	brne	.+4      	; 0x252e <KP_CheckColumns+0x4a>
		ColNumber = 3;
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	89 83       	std	Y+1, r24	; 0x01
	}
	return ColNumber;
    252e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <KP_getPressedButton>:
 * Put High on each row then, check the columns
 * ROWS --> PC0 - PC3
 * COLS --> PC4 - PC7
 *
 */
uint8 KP_getPressedButton(){
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <KP_getPressedButton+0x6>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
	uint8 PressedButton = KP_RELEASED;  //Indication that there is no pressed button
    2542:	8f ef       	ldi	r24, 0xFF	; 255
    2544:	8a 83       	std	Y+2, r24	; 0x02

	//Put Low on ROW 0 then, check columns (Because of pull up resistor)
	Dio_write(PORTC_0,LOW);  //It is already high so, we want to reverse th process
    2546:	80 e1       	ldi	r24, 0x10	; 16
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_1,HIGH);
    254e:	81 e1       	ldi	r24, 0x11	; 17
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_2,HIGH);
    2556:	82 e1       	ldi	r24, 0x12	; 18
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_3,HIGH);
    255e:	83 e1       	ldi	r24, 0x13	; 19
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Check Columns
	uint8 ColNum = KP_CheckColumns();
    2566:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KP_CheckColumns>
    256a:	89 83       	std	Y+1, r24	; 0x01
	if(ColNum != KP_RELEASED){   //It means that someone has already pressed a button in this column
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	8f 3f       	cpi	r24, 0xFF	; 255
    2570:	41 f0       	breq	.+16     	; 0x2582 <KP_getPressedButton+0x4a>
		PressedButton = KP_MapArr[0][ColNum];
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	88 2f       	mov	r24, r24
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	fc 01       	movw	r30, r24
    257a:	ec 52       	subi	r30, 0x2C	; 44
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	8a 83       	std	Y+2, r24	; 0x02
	}

	//Put High on ROW 1 then, check columns
	Dio_write(PORTC_0,HIGH);
    2582:	80 e1       	ldi	r24, 0x10	; 16
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_1,LOW);
    258a:	81 e1       	ldi	r24, 0x11	; 17
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_2,HIGH);
    2592:	82 e1       	ldi	r24, 0x12	; 18
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_3,HIGH);
    259a:	83 e1       	ldi	r24, 0x13	; 19
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Check Columns
	ColNum = KP_CheckColumns();
    25a2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KP_CheckColumns>
    25a6:	89 83       	std	Y+1, r24	; 0x01
	if(ColNum != KP_RELEASED){
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	8f 3f       	cpi	r24, 0xFF	; 255
    25ac:	41 f0       	breq	.+16     	; 0x25be <KP_getPressedButton+0x86>
		PressedButton = KP_MapArr[1][ColNum];
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	fc 01       	movw	r30, r24
    25b6:	e8 52       	subi	r30, 0x28	; 40
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	8a 83       	std	Y+2, r24	; 0x02
	}


	//Put High on ROW 2 then, check columns
	Dio_write(PORTC_0,HIGH);
    25be:	80 e1       	ldi	r24, 0x10	; 16
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_1,HIGH);
    25c6:	81 e1       	ldi	r24, 0x11	; 17
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_2,LOW);
    25ce:	82 e1       	ldi	r24, 0x12	; 18
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_3,HIGH);
    25d6:	83 e1       	ldi	r24, 0x13	; 19
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Check Columns
	ColNum = KP_CheckColumns();
    25de:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KP_CheckColumns>
    25e2:	89 83       	std	Y+1, r24	; 0x01
	if(ColNum != KP_RELEASED){
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	8f 3f       	cpi	r24, 0xFF	; 255
    25e8:	41 f0       	breq	.+16     	; 0x25fa <KP_getPressedButton+0xc2>
		PressedButton = KP_MapArr[2][ColNum];
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	fc 01       	movw	r30, r24
    25f2:	e4 52       	subi	r30, 0x24	; 36
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	8a 83       	std	Y+2, r24	; 0x02
	}


	//Put High on ROW 0 then, check columns
	Dio_write(PORTC_0,HIGH);
    25fa:	80 e1       	ldi	r24, 0x10	; 16
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_1,HIGH);
    2602:	81 e1       	ldi	r24, 0x11	; 17
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_2,HIGH);
    260a:	82 e1       	ldi	r24, 0x12	; 18
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	Dio_write(PORTC_3,LOW);
    2612:	83 e1       	ldi	r24, 0x13	; 19
    2614:	60 e0       	ldi	r22, 0x00	; 0
    2616:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
	//Check Columns
	ColNum = KP_CheckColumns();
    261a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <KP_CheckColumns>
    261e:	89 83       	std	Y+1, r24	; 0x01
	if(ColNum != KP_RELEASED){
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8f 3f       	cpi	r24, 0xFF	; 255
    2624:	41 f0       	breq	.+16     	; 0x2636 <KP_getPressedButton+0xfe>
		PressedButton = KP_MapArr[3][ColNum];
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	fc 01       	movw	r30, r24
    262e:	e0 52       	subi	r30, 0x20	; 32
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	8a 83       	std	Y+2, r24	; 0x02
	}

	return PressedButton;
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <EXT_init_Interrupt0>:
uint16 result;
uint8 Key_Pressed = KP_RELEASED;
uint8 Password[8];
uint8 pas = 0;

void EXT_init_Interrupt0(){
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0);   //Enable EXT_interrupt 0
    264a:	ab e5       	ldi	r26, 0x5B	; 91
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	eb e5       	ldi	r30, 0x5B	; 91
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	80 64       	ori	r24, 0x40	; 64
    2656:	8c 93       	st	X, r24
	//Configure interrupt for both edges
	SET_BIT(MCUCR,ISC00);
    2658:	a5 e5       	ldi	r26, 0x55	; 85
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e5 e5       	ldi	r30, 0x55	; 85
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	81 60       	ori	r24, 0x01	; 1
    2664:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
    2666:	a5 e5       	ldi	r26, 0x55	; 85
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e5 e5       	ldi	r30, 0x55	; 85
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8d 7f       	andi	r24, 0xFD	; 253
    2672:	8c 93       	st	X, r24
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <__vector_1>:

ISR(INT0_vect){
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	2f 93       	push	r18
    2686:	3f 93       	push	r19
    2688:	4f 93       	push	r20
    268a:	5f 93       	push	r21
    268c:	6f 93       	push	r22
    268e:	7f 93       	push	r23
    2690:	8f 93       	push	r24
    2692:	9f 93       	push	r25
    2694:	af 93       	push	r26
    2696:	bf 93       	push	r27
    2698:	ef 93       	push	r30
    269a:	ff 93       	push	r31
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	6c 97       	sbiw	r28, 0x1c	; 28
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	cd bf       	out	0x3d, r28	; 61
	Dio_write(PORTD_4,HIGH);
    26aa:	8c e1       	ldi	r24, 0x1C	; 28
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a8 e4       	ldi	r26, 0x48	; 72
    26b8:	b4 e4       	ldi	r27, 0x44	; 68
    26ba:	89 8f       	std	Y+25, r24	; 0x19
    26bc:	9a 8f       	std	Y+26, r25	; 0x1a
    26be:	ab 8f       	std	Y+27, r26	; 0x1b
    26c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	69 8d       	ldd	r22, Y+25	; 0x19
    26c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a ef       	ldi	r20, 0xFA	; 250
    26d0:	54 e4       	ldi	r21, 0x44	; 68
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8d 8b       	std	Y+21, r24	; 0x15
    26dc:	9e 8b       	std	Y+22, r25	; 0x16
    26de:	af 8b       	std	Y+23, r26	; 0x17
    26e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26e2:	6d 89       	ldd	r22, Y+21	; 0x15
    26e4:	7e 89       	ldd	r23, Y+22	; 0x16
    26e6:	8f 89       	ldd	r24, Y+23	; 0x17
    26e8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <__vector_1+0x8a>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9c 8b       	std	Y+20, r25	; 0x14
    2700:	8b 8b       	std	Y+19, r24	; 0x13
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <__vector_1+0x108>
	else if (__tmp > 65535)
    2704:	6d 89       	ldd	r22, Y+21	; 0x15
    2706:	7e 89       	ldd	r23, Y+22	; 0x16
    2708:	8f 89       	ldd	r24, Y+23	; 0x17
    270a:	98 8d       	ldd	r25, Y+24	; 0x18
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <__vector_1+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	69 8d       	ldd	r22, Y+25	; 0x19
    271e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2720:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2722:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9c 8b       	std	Y+20, r25	; 0x14
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <__vector_1+0xea>
    2746:	88 ec       	ldi	r24, 0xC8	; 200
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9a 8b       	std	Y+18, r25	; 0x12
    274c:	89 8b       	std	Y+17, r24	; 0x11
    274e:	89 89       	ldd	r24, Y+17	; 0x11
    2750:	9a 89       	ldd	r25, Y+18	; 0x12
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <__vector_1+0xd8>
    2756:	9a 8b       	std	Y+18, r25	; 0x12
    2758:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8b 89       	ldd	r24, Y+19	; 0x13
    2766:	9c 89       	ldd	r25, Y+20	; 0x14
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <__vector_1+0xcc>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <__vector_1+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6d 89       	ldd	r22, Y+21	; 0x15
    2770:	7e 89       	ldd	r23, Y+22	; 0x16
    2772:	8f 89       	ldd	r24, Y+23	; 0x17
    2774:	98 8d       	ldd	r25, Y+24	; 0x18
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9c 8b       	std	Y+20, r25	; 0x14
    2780:	8b 8b       	std	Y+19, r24	; 0x13
    2782:	8b 89       	ldd	r24, Y+19	; 0x13
    2784:	9c 89       	ldd	r25, Y+20	; 0x14
    2786:	98 8b       	std	Y+16, r25	; 0x10
    2788:	8f 87       	std	Y+15, r24	; 0x0f
    278a:	8f 85       	ldd	r24, Y+15	; 0x0f
    278c:	98 89       	ldd	r25, Y+16	; 0x10
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <__vector_1+0x114>
    2792:	98 8b       	std	Y+16, r25	; 0x10
    2794:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(800);
	Dio_write(PORTD_4,LOW);
    2796:	8c e1       	ldi	r24, 0x1C	; 28
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Dio_write>
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a8 e4       	ldi	r26, 0x48	; 72
    27a4:	b4 e4       	ldi	r27, 0x44	; 68
    27a6:	8b 87       	std	Y+11, r24	; 0x0b
    27a8:	9c 87       	std	Y+12, r25	; 0x0c
    27aa:	ad 87       	std	Y+13, r26	; 0x0d
    27ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	4a ef       	ldi	r20, 0xFA	; 250
    27bc:	54 e4       	ldi	r21, 0x44	; 68
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8f 83       	std	Y+7, r24	; 0x07
    27c8:	98 87       	std	Y+8, r25	; 0x08
    27ca:	a9 87       	std	Y+9, r26	; 0x09
    27cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e8       	ldi	r20, 0x80	; 128
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e2:	88 23       	and	r24, r24
    27e4:	2c f4       	brge	.+10     	; 0x27f0 <__vector_1+0x176>
		__ticks = 1;
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9e 83       	std	Y+6, r25	; 0x06
    27ec:	8d 83       	std	Y+5, r24	; 0x05
    27ee:	3f c0       	rjmp	.+126    	; 0x286e <__vector_1+0x1f4>
	else if (__tmp > 65535)
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	3f ef       	ldi	r19, 0xFF	; 255
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	57 e4       	ldi	r21, 0x47	; 71
    2800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	4c f5       	brge	.+82     	; 0x285a <__vector_1+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e2       	ldi	r20, 0x20	; 32
    2816:	51 e4       	ldi	r21, 0x41	; 65
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	0f c0       	rjmp	.+30     	; 0x2850 <__vector_1+0x1d6>
    2832:	88 ec       	ldi	r24, 0xC8	; 200
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	8b 83       	std	Y+3, r24	; 0x03
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <__vector_1+0x1c4>
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	69 f7       	brne	.-38     	; 0x2832 <__vector_1+0x1b8>
    2858:	14 c0       	rjmp	.+40     	; 0x2882 <__vector_1+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	9a 83       	std	Y+2, r25	; 0x02
    2874:	89 83       	std	Y+1, r24	; 0x01
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <__vector_1+0x200>
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(800);
}
    2882:	6c 96       	adiw	r28, 0x1c	; 28
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	ff 91       	pop	r31
    288e:	ef 91       	pop	r30
    2890:	bf 91       	pop	r27
    2892:	af 91       	pop	r26
    2894:	9f 91       	pop	r25
    2896:	8f 91       	pop	r24
    2898:	7f 91       	pop	r23
    289a:	6f 91       	pop	r22
    289c:	5f 91       	pop	r21
    289e:	4f 91       	pop	r20
    28a0:	3f 91       	pop	r19
    28a2:	2f 91       	pop	r18
    28a4:	0f 90       	pop	r0
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	0f 90       	pop	r0
    28aa:	1f 90       	pop	r1
    28ac:	18 95       	reti

000028ae <main>:

int main(void)
{
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	c4 5b       	subi	r28, 0xB4	; 180
    28bc:	d0 40       	sbci	r29, 0x00	; 0
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
	Dio_init();
    28c8:	0e 94 3d 08 	call	0x107a	; 0x107a <Dio_init>
	SREG |= (1<<7); //Enable global interrupt
    28cc:	af e5       	ldi	r26, 0x5F	; 95
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	ef e5       	ldi	r30, 0x5F	; 95
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	80 68       	ori	r24, 0x80	; 128
    28d8:	8c 93       	st	X, r24
	EXTI_init();
    28da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EXTI_init>
	label : Lcd_Init();   //To return to this point
    28de:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Lcd_Init>

	/* Entering Password */

	Lcd_sendString_xy("password",1,1);   //Password --> 1234
    28e2:	80 e6       	ldi	r24, 0x60	; 96
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <Lcd_sendString_xy>
	do {
		Password[pas] = KP_getPressedButton();
    28ee:	80 91 ed 00 	lds	r24, 0x00ED
    28f2:	08 2f       	mov	r16, r24
    28f4:	10 e0       	ldi	r17, 0x00	; 0
    28f6:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    28fa:	f8 01       	movw	r30, r16
    28fc:	e0 51       	subi	r30, 0x10	; 16
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 83       	st	Z, r24
	} while (Password[pas] == KP_RELEASED);
    2902:	80 91 ed 00 	lds	r24, 0x00ED
    2906:	88 2f       	mov	r24, r24
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	fc 01       	movw	r30, r24
    290c:	e0 51       	subi	r30, 0x10	; 16
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	8f 3f       	cpi	r24, 0xFF	; 255
    2914:	61 f3       	breq	.-40     	; 0x28ee <main+0x40>
		Lcd_sendChar(Password[pas]);
    2916:	80 91 ed 00 	lds	r24, 0x00ED
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	fc 01       	movw	r30, r24
    2920:	e0 51       	subi	r30, 0x10	; 16
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
	pas++;
    292a:	80 91 ed 00 	lds	r24, 0x00ED
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 ed 00 	sts	0x00ED, r24
    2934:	fe 01       	movw	r30, r28
    2936:	eb 55       	subi	r30, 0x5B	; 91
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a6 e9       	ldi	r26, 0x96	; 150
    2940:	b3 e4       	ldi	r27, 0x43	; 67
    2942:	80 83       	st	Z, r24
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	a2 83       	std	Z+2, r26	; 0x02
    2948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	8e 01       	movw	r16, r28
    294c:	0f 55       	subi	r16, 0x5F	; 95
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	eb 55       	subi	r30, 0x5B	; 91
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a ef       	ldi	r20, 0xFA	; 250
    2964:	54 e4       	ldi	r21, 0x44	; 68
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2978:	fe 01       	movw	r30, r28
    297a:	ef 55       	subi	r30, 0x5F	; 95
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	44 f4       	brge	.+16     	; 0x29a6 <main+0xf8>
		__ticks = 1;
    2996:	fe 01       	movw	r30, r28
    2998:	e1 56       	subi	r30, 0x61	; 97
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	64 c0       	rjmp	.+200    	; 0x2a6e <main+0x1c0>
	else if (__tmp > 65535)
    29a6:	fe 01       	movw	r30, r28
    29a8:	ef 55       	subi	r30, 0x5F	; 95
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	0c f0       	brlt	.+2      	; 0x29c6 <main+0x118>
    29c4:	43 c0       	rjmp	.+134    	; 0x2a4c <main+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	fe 01       	movw	r30, r28
    29c8:	eb 55       	subi	r30, 0x5B	; 91
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8e 01       	movw	r16, r28
    29e6:	01 56       	subi	r16, 0x61	; 97
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	1f c0       	rjmp	.+62     	; 0x2a3c <main+0x18e>
    29fe:	fe 01       	movw	r30, r28
    2a00:	e3 56       	subi	r30, 0x63	; 99
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e3 56       	subi	r30, 0x63	; 99
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <main+0x168>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e3 56       	subi	r30, 0x63	; 99
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	de 01       	movw	r26, r28
    2a26:	a1 56       	subi	r26, 0x61	; 97
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e1 56       	subi	r30, 0x61	; 97
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e1 56       	subi	r30, 0x61	; 97
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	d1 f6       	brne	.-76     	; 0x29fe <main+0x150>
    2a4a:	27 c0       	rjmp	.+78     	; 0x2a9a <main+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	01 56       	subi	r16, 0x61	; 97
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	ef 55       	subi	r30, 0x5F	; 95
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	80 83       	st	Z, r24
    2a6e:	de 01       	movw	r26, r28
    2a70:	a5 56       	subi	r26, 0x65	; 101
    2a72:	bf 4f       	sbci	r27, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e1 56       	subi	r30, 0x61	; 97
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	8d 93       	st	X+, r24
    2a80:	9c 93       	st	X, r25
    2a82:	fe 01       	movw	r30, r28
    2a84:	e5 56       	subi	r30, 0x65	; 101
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <main+0x1de>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e5 56       	subi	r30, 0x65	; 101
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
	_delay_ms(300);
	do {
		Password[pas] = KP_getPressedButton();
    2a9a:	80 91 ed 00 	lds	r24, 0x00ED
    2a9e:	08 2f       	mov	r16, r24
    2aa0:	10 e0       	ldi	r17, 0x00	; 0
    2aa2:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	e0 51       	subi	r30, 0x10	; 16
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 83       	st	Z, r24
	} while (Password[pas] == KP_RELEASED);
    2aae:	80 91 ed 00 	lds	r24, 0x00ED
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e0 51       	subi	r30, 0x10	; 16
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 3f       	cpi	r24, 0xFF	; 255
    2ac0:	61 f3       	breq	.-40     	; 0x2a9a <main+0x1ec>
	Lcd_sendChar(Password[pas]);
    2ac2:	80 91 ed 00 	lds	r24, 0x00ED
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	fc 01       	movw	r30, r24
    2acc:	e0 51       	subi	r30, 0x10	; 16
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
	pas++;
    2ad6:	80 91 ed 00 	lds	r24, 0x00ED
    2ada:	8f 5f       	subi	r24, 0xFF	; 255
    2adc:	80 93 ed 00 	sts	0x00ED, r24
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e9 56       	subi	r30, 0x69	; 105
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a6 e9       	ldi	r26, 0x96	; 150
    2aec:	b3 e4       	ldi	r27, 0x43	; 67
    2aee:	80 83       	st	Z, r24
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	a2 83       	std	Z+2, r26	; 0x02
    2af4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	8e 01       	movw	r16, r28
    2af8:	0d 56       	subi	r16, 0x6D	; 109
    2afa:	1f 4f       	sbci	r17, 0xFF	; 255
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 56       	subi	r30, 0x69	; 105
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	60 81       	ld	r22, Z
    2b04:	71 81       	ldd	r23, Z+1	; 0x01
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	93 81       	ldd	r25, Z+3	; 0x03
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a ef       	ldi	r20, 0xFA	; 250
    2b10:	54 e4       	ldi	r21, 0x44	; 68
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	80 83       	st	Z, r24
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	a2 83       	std	Z+2, r26	; 0x02
    2b22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b24:	fe 01       	movw	r30, r28
    2b26:	ed 56       	subi	r30, 0x6D	; 109
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f e3       	ldi	r21, 0x3F	; 63
    2b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3e:	88 23       	and	r24, r24
    2b40:	44 f4       	brge	.+16     	; 0x2b52 <main+0x2a4>
		__ticks = 1;
    2b42:	fe 01       	movw	r30, r28
    2b44:	ef 56       	subi	r30, 0x6F	; 111
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	80 83       	st	Z, r24
    2b50:	64 c0       	rjmp	.+200    	; 0x2c1a <main+0x36c>
	else if (__tmp > 65535)
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 56       	subi	r30, 0x6D	; 109
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	0c f0       	brlt	.+2      	; 0x2b72 <main+0x2c4>
    2b70:	43 c0       	rjmp	.+134    	; 0x2bf8 <main+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	fe 01       	movw	r30, r28
    2b74:	e9 56       	subi	r30, 0x69	; 105
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8e 01       	movw	r16, r28
    2b92:	0f 56       	subi	r16, 0x6F	; 111
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	bc 01       	movw	r22, r24
    2b98:	cd 01       	movw	r24, r26
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
    2ba8:	1f c0       	rjmp	.+62     	; 0x2be8 <main+0x33a>
    2baa:	fe 01       	movw	r30, r28
    2bac:	e1 57       	subi	r30, 0x71	; 113
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	88 ec       	ldi	r24, 0xC8	; 200
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	91 83       	std	Z+1, r25	; 0x01
    2bb6:	80 83       	st	Z, r24
    2bb8:	fe 01       	movw	r30, r28
    2bba:	e1 57       	subi	r30, 0x71	; 113
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	91 81       	ldd	r25, Z+1	; 0x01
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <main+0x314>
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e1 57       	subi	r30, 0x71	; 113
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd0:	de 01       	movw	r26, r28
    2bd2:	af 56       	subi	r26, 0x6F	; 111
    2bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ef 56       	subi	r30, 0x6F	; 111
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	11 96       	adiw	r26, 0x01	; 1
    2be4:	9c 93       	st	X, r25
    2be6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	fe 01       	movw	r30, r28
    2bea:	ef 56       	subi	r30, 0x6F	; 111
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	d1 f6       	brne	.-76     	; 0x2baa <main+0x2fc>
    2bf6:	27 c0       	rjmp	.+78     	; 0x2c46 <main+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf8:	8e 01       	movw	r16, r28
    2bfa:	0f 56       	subi	r16, 0x6F	; 111
    2bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 56       	subi	r30, 0x6D	; 109
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	f8 01       	movw	r30, r16
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
    2c1a:	de 01       	movw	r26, r28
    2c1c:	a3 57       	subi	r26, 0x73	; 115
    2c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	ef 56       	subi	r30, 0x6F	; 111
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	8d 93       	st	X+, r24
    2c2c:	9c 93       	st	X, r25
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e3 57       	subi	r30, 0x73	; 115
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	91 81       	ldd	r25, Z+1	; 0x01
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <main+0x38a>
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e3 57       	subi	r30, 0x73	; 115
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
	_delay_ms(300);
	do {
		Password[pas] = KP_getPressedButton();
    2c46:	80 91 ed 00 	lds	r24, 0x00ED
    2c4a:	08 2f       	mov	r16, r24
    2c4c:	10 e0       	ldi	r17, 0x00	; 0
    2c4e:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    2c52:	f8 01       	movw	r30, r16
    2c54:	e0 51       	subi	r30, 0x10	; 16
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 83       	st	Z, r24
	} while (Password[pas] == KP_RELEASED);
    2c5a:	80 91 ed 00 	lds	r24, 0x00ED
    2c5e:	88 2f       	mov	r24, r24
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	fc 01       	movw	r30, r24
    2c64:	e0 51       	subi	r30, 0x10	; 16
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	80 81       	ld	r24, Z
    2c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6c:	61 f3       	breq	.-40     	; 0x2c46 <main+0x398>
	Lcd_sendChar(Password[pas]);
    2c6e:	80 91 ed 00 	lds	r24, 0x00ED
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	fc 01       	movw	r30, r24
    2c78:	e0 51       	subi	r30, 0x10	; 16
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	80 81       	ld	r24, Z
    2c7e:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
	pas++;
    2c82:	80 91 ed 00 	lds	r24, 0x00ED
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	80 93 ed 00 	sts	0x00ED, r24
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e7 57       	subi	r30, 0x77	; 119
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a6 e9       	ldi	r26, 0x96	; 150
    2c98:	b3 e4       	ldi	r27, 0x43	; 67
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	8e 01       	movw	r16, r28
    2ca4:	0b 57       	subi	r16, 0x7B	; 123
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e7 57       	subi	r30, 0x77	; 119
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	60 81       	ld	r22, Z
    2cb0:	71 81       	ldd	r23, Z+1	; 0x01
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a ef       	ldi	r20, 0xFA	; 250
    2cbc:	54 e4       	ldi	r21, 0x44	; 68
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	80 83       	st	Z, r24
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	a2 83       	std	Z+2, r26	; 0x02
    2cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	eb 57       	subi	r30, 0x7B	; 123
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	44 f4       	brge	.+16     	; 0x2cfe <main+0x450>
		__ticks = 1;
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ed 57       	subi	r30, 0x7D	; 125
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
    2cfc:	64 c0       	rjmp	.+200    	; 0x2dc6 <main+0x518>
	else if (__tmp > 65535)
    2cfe:	fe 01       	movw	r30, r28
    2d00:	eb 57       	subi	r30, 0x7B	; 123
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	0c f0       	brlt	.+2      	; 0x2d1e <main+0x470>
    2d1c:	43 c0       	rjmp	.+134    	; 0x2da4 <main+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e7 57       	subi	r30, 0x77	; 119
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8e 01       	movw	r16, r28
    2d3e:	0d 57       	subi	r16, 0x7D	; 125
    2d40:	1f 4f       	sbci	r17, 0xFF	; 255
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	f8 01       	movw	r30, r16
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	80 83       	st	Z, r24
    2d54:	1f c0       	rjmp	.+62     	; 0x2d94 <main+0x4e6>
    2d56:	fe 01       	movw	r30, r28
    2d58:	ef 57       	subi	r30, 0x7F	; 127
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	88 ec       	ldi	r24, 0xC8	; 200
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	80 83       	st	Z, r24
    2d64:	fe 01       	movw	r30, r28
    2d66:	ef 57       	subi	r30, 0x7F	; 127
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <main+0x4c0>
    2d72:	fe 01       	movw	r30, r28
    2d74:	ef 57       	subi	r30, 0x7F	; 127
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	de 01       	movw	r26, r28
    2d7e:	ad 57       	subi	r26, 0x7D	; 125
    2d80:	bf 4f       	sbci	r27, 0xFF	; 255
    2d82:	fe 01       	movw	r30, r28
    2d84:	ed 57       	subi	r30, 0x7D	; 125
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	11 96       	adiw	r26, 0x01	; 1
    2d90:	9c 93       	st	X, r25
    2d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d94:	fe 01       	movw	r30, r28
    2d96:	ed 57       	subi	r30, 0x7D	; 125
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	d1 f6       	brne	.-76     	; 0x2d56 <main+0x4a8>
    2da2:	27 c0       	rjmp	.+78     	; 0x2df2 <main+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	8e 01       	movw	r16, r28
    2da6:	0d 57       	subi	r16, 0x7D	; 125
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255
    2daa:	fe 01       	movw	r30, r28
    2dac:	eb 57       	subi	r30, 0x7B	; 123
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
    2dc6:	de 01       	movw	r26, r28
    2dc8:	a1 58       	subi	r26, 0x81	; 129
    2dca:	bf 4f       	sbci	r27, 0xFF	; 255
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 57       	subi	r30, 0x7D	; 125
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	8d 93       	st	X+, r24
    2dd8:	9c 93       	st	X, r25
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e1 58       	subi	r30, 0x81	; 129
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	91 81       	ldd	r25, Z+1	; 0x01
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <main+0x536>
    2de8:	fe 01       	movw	r30, r28
    2dea:	e1 58       	subi	r30, 0x81	; 129
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	91 83       	std	Z+1, r25	; 0x01
    2df0:	80 83       	st	Z, r24
	_delay_ms(300);
	do {
		Password[pas] = KP_getPressedButton();
    2df2:	80 91 ed 00 	lds	r24, 0x00ED
    2df6:	08 2f       	mov	r16, r24
    2df8:	10 e0       	ldi	r17, 0x00	; 0
    2dfa:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    2dfe:	f8 01       	movw	r30, r16
    2e00:	e0 51       	subi	r30, 0x10	; 16
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 83       	st	Z, r24
	} while (Password[pas] == KP_RELEASED);
    2e06:	80 91 ed 00 	lds	r24, 0x00ED
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	fc 01       	movw	r30, r24
    2e10:	e0 51       	subi	r30, 0x10	; 16
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	8f 3f       	cpi	r24, 0xFF	; 255
    2e18:	61 f3       	breq	.-40     	; 0x2df2 <main+0x544>
	Lcd_sendChar(Password[pas]);
    2e1a:	80 91 ed 00 	lds	r24, 0x00ED
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	fc 01       	movw	r30, r24
    2e24:	e0 51       	subi	r30, 0x10	; 16
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	80 81       	ld	r24, Z
    2e2a:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
	pas++;
    2e2e:	80 91 ed 00 	lds	r24, 0x00ED
    2e32:	8f 5f       	subi	r24, 0xFF	; 255
    2e34:	80 93 ed 00 	sts	0x00ED, r24
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 58       	subi	r30, 0x85	; 133
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a6 e9       	ldi	r26, 0x96	; 150
    2e44:	b3 e4       	ldi	r27, 0x43	; 67
    2e46:	80 83       	st	Z, r24
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4e:	8e 01       	movw	r16, r28
    2e50:	09 58       	subi	r16, 0x89	; 137
    2e52:	1f 4f       	sbci	r17, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	e5 58       	subi	r30, 0x85	; 133
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	60 81       	ld	r22, Z
    2e5c:	71 81       	ldd	r23, Z+1	; 0x01
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	93 81       	ldd	r25, Z+3	; 0x03
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a ef       	ldi	r20, 0xFA	; 250
    2e68:	54 e4       	ldi	r21, 0x44	; 68
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	f8 01       	movw	r30, r16
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	a2 83       	std	Z+2, r26	; 0x02
    2e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e9 58       	subi	r30, 0x89	; 137
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	44 f4       	brge	.+16     	; 0x2eaa <main+0x5fc>
		__ticks = 1;
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	eb 58       	subi	r30, 0x8B	; 139
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
    2ea8:	64 c0       	rjmp	.+200    	; 0x2f72 <main+0x6c4>
	else if (__tmp > 65535)
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e9 58       	subi	r30, 0x89	; 137
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	57 e4       	ldi	r21, 0x47	; 71
    2ec0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	0c f0       	brlt	.+2      	; 0x2eca <main+0x61c>
    2ec8:	43 c0       	rjmp	.+134    	; 0x2f50 <main+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e5 58       	subi	r30, 0x85	; 133
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	8e 01       	movw	r16, r28
    2eea:	0b 58       	subi	r16, 0x8B	; 139
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	f8 01       	movw	r30, r16
    2efc:	91 83       	std	Z+1, r25	; 0x01
    2efe:	80 83       	st	Z, r24
    2f00:	1f c0       	rjmp	.+62     	; 0x2f40 <main+0x692>
    2f02:	fe 01       	movw	r30, r28
    2f04:	ed 58       	subi	r30, 0x8D	; 141
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	88 ec       	ldi	r24, 0xC8	; 200
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	fe 01       	movw	r30, r28
    2f12:	ed 58       	subi	r30, 0x8D	; 141
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <main+0x66c>
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 58       	subi	r30, 0x8D	; 141
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f28:	de 01       	movw	r26, r28
    2f2a:	ab 58       	subi	r26, 0x8B	; 139
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	fe 01       	movw	r30, r28
    2f30:	eb 58       	subi	r30, 0x8B	; 139
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	91 81       	ldd	r25, Z+1	; 0x01
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	11 96       	adiw	r26, 0x01	; 1
    2f3c:	9c 93       	st	X, r25
    2f3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f40:	fe 01       	movw	r30, r28
    2f42:	eb 58       	subi	r30, 0x8B	; 139
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	d1 f6       	brne	.-76     	; 0x2f02 <main+0x654>
    2f4e:	27 c0       	rjmp	.+78     	; 0x2f9e <main+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	8e 01       	movw	r16, r28
    2f52:	0b 58       	subi	r16, 0x8B	; 139
    2f54:	1f 4f       	sbci	r17, 0xFF	; 255
    2f56:	fe 01       	movw	r30, r28
    2f58:	e9 58       	subi	r30, 0x89	; 137
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	60 81       	ld	r22, Z
    2f5e:	71 81       	ldd	r23, Z+1	; 0x01
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	de 01       	movw	r26, r28
    2f74:	af 58       	subi	r26, 0x8F	; 143
    2f76:	bf 4f       	sbci	r27, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	eb 58       	subi	r30, 0x8B	; 139
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	8d 93       	st	X+, r24
    2f84:	9c 93       	st	X, r25
    2f86:	fe 01       	movw	r30, r28
    2f88:	ef 58       	subi	r30, 0x8F	; 143
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x6e2>
    2f94:	fe 01       	movw	r30, r28
    2f96:	ef 58       	subi	r30, 0x8F	; 143
    2f98:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	80 83       	st	Z, r24
	_delay_ms(300);
	do {
		Key_Pressed = KP_getPressedButton();
    2f9e:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    2fa2:	80 93 ea 00 	sts	0x00EA, r24
		} while (Key_Pressed == KP_RELEASED);
    2fa6:	80 91 ea 00 	lds	r24, 0x00EA
    2faa:	8f 3f       	cpi	r24, 0xFF	; 255
    2fac:	c1 f3       	breq	.-16     	; 0x2f9e <main+0x6f0>
			if (Key_Pressed == 'A') {
    2fae:	80 91 ea 00 	lds	r24, 0x00EA
    2fb2:	81 34       	cpi	r24, 0x41	; 65
    2fb4:	11 f0       	breq	.+4      	; 0x2fba <main+0x70c>
    2fb6:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <main+0x1766>
				if((Password[0]=='1')&(Password[1]=='2')&(Password[2]=='3')&(Password[3]=='4')){
    2fba:	80 91 f0 00 	lds	r24, 0x00F0
    2fbe:	cc 54       	subi	r28, 0x4C	; 76
    2fc0:	df 4f       	sbci	r29, 0xFF	; 255
    2fc2:	18 82       	st	Y, r1
    2fc4:	c4 5b       	subi	r28, 0xB4	; 180
    2fc6:	d0 40       	sbci	r29, 0x00	; 0
    2fc8:	81 33       	cpi	r24, 0x31	; 49
    2fca:	31 f4       	brne	.+12     	; 0x2fd8 <main+0x72a>
    2fcc:	f1 e0       	ldi	r31, 0x01	; 1
    2fce:	cc 54       	subi	r28, 0x4C	; 76
    2fd0:	df 4f       	sbci	r29, 0xFF	; 255
    2fd2:	f8 83       	st	Y, r31
    2fd4:	c4 5b       	subi	r28, 0xB4	; 180
    2fd6:	d0 40       	sbci	r29, 0x00	; 0
    2fd8:	80 91 f1 00 	lds	r24, 0x00F1
    2fdc:	cd 54       	subi	r28, 0x4D	; 77
    2fde:	df 4f       	sbci	r29, 0xFF	; 255
    2fe0:	18 82       	st	Y, r1
    2fe2:	c3 5b       	subi	r28, 0xB3	; 179
    2fe4:	d0 40       	sbci	r29, 0x00	; 0
    2fe6:	82 33       	cpi	r24, 0x32	; 50
    2fe8:	31 f4       	brne	.+12     	; 0x2ff6 <main+0x748>
    2fea:	21 e0       	ldi	r18, 0x01	; 1
    2fec:	cd 54       	subi	r28, 0x4D	; 77
    2fee:	df 4f       	sbci	r29, 0xFF	; 255
    2ff0:	28 83       	st	Y, r18
    2ff2:	c3 5b       	subi	r28, 0xB3	; 179
    2ff4:	d0 40       	sbci	r29, 0x00	; 0
    2ff6:	cc 54       	subi	r28, 0x4C	; 76
    2ff8:	df 4f       	sbci	r29, 0xFF	; 255
    2ffa:	88 81       	ld	r24, Y
    2ffc:	c4 5b       	subi	r28, 0xB4	; 180
    2ffe:	d0 40       	sbci	r29, 0x00	; 0
    3000:	cd 54       	subi	r28, 0x4D	; 77
    3002:	df 4f       	sbci	r29, 0xFF	; 255
    3004:	38 81       	ld	r19, Y
    3006:	c3 5b       	subi	r28, 0xB3	; 179
    3008:	d0 40       	sbci	r29, 0x00	; 0
    300a:	83 23       	and	r24, r19
    300c:	e8 2f       	mov	r30, r24
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	cf 54       	subi	r28, 0x4F	; 79
    3012:	df 4f       	sbci	r29, 0xFF	; 255
    3014:	f9 83       	std	Y+1, r31	; 0x01
    3016:	e8 83       	st	Y, r30
    3018:	c1 5b       	subi	r28, 0xB1	; 177
    301a:	d0 40       	sbci	r29, 0x00	; 0
    301c:	80 91 f2 00 	lds	r24, 0x00F2
    3020:	c1 55       	subi	r28, 0x51	; 81
    3022:	df 4f       	sbci	r29, 0xFF	; 255
    3024:	19 82       	std	Y+1, r1	; 0x01
    3026:	18 82       	st	Y, r1
    3028:	cf 5a       	subi	r28, 0xAF	; 175
    302a:	d0 40       	sbci	r29, 0x00	; 0
    302c:	83 33       	cpi	r24, 0x33	; 51
    302e:	41 f4       	brne	.+16     	; 0x3040 <main+0x792>
    3030:	21 e0       	ldi	r18, 0x01	; 1
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	c1 55       	subi	r28, 0x51	; 81
    3036:	df 4f       	sbci	r29, 0xFF	; 255
    3038:	39 83       	std	Y+1, r19	; 0x01
    303a:	28 83       	st	Y, r18
    303c:	cf 5a       	subi	r28, 0xAF	; 175
    303e:	d0 40       	sbci	r29, 0x00	; 0
    3040:	cf 54       	subi	r28, 0x4F	; 79
    3042:	df 4f       	sbci	r29, 0xFF	; 255
    3044:	88 81       	ld	r24, Y
    3046:	99 81       	ldd	r25, Y+1	; 0x01
    3048:	c1 5b       	subi	r28, 0xB1	; 177
    304a:	d0 40       	sbci	r29, 0x00	; 0
    304c:	c1 55       	subi	r28, 0x51	; 81
    304e:	df 4f       	sbci	r29, 0xFF	; 255
    3050:	e8 81       	ld	r30, Y
    3052:	f9 81       	ldd	r31, Y+1	; 0x01
    3054:	cf 5a       	subi	r28, 0xAF	; 175
    3056:	d0 40       	sbci	r29, 0x00	; 0
    3058:	8e 23       	and	r24, r30
    305a:	9f 23       	and	r25, r31
    305c:	c3 55       	subi	r28, 0x53	; 83
    305e:	df 4f       	sbci	r29, 0xFF	; 255
    3060:	99 83       	std	Y+1, r25	; 0x01
    3062:	88 83       	st	Y, r24
    3064:	cd 5a       	subi	r28, 0xAD	; 173
    3066:	d0 40       	sbci	r29, 0x00	; 0
    3068:	80 91 f3 00 	lds	r24, 0x00F3
    306c:	c5 55       	subi	r28, 0x55	; 85
    306e:	df 4f       	sbci	r29, 0xFF	; 255
    3070:	19 82       	std	Y+1, r1	; 0x01
    3072:	18 82       	st	Y, r1
    3074:	cb 5a       	subi	r28, 0xAB	; 171
    3076:	d0 40       	sbci	r29, 0x00	; 0
    3078:	84 33       	cpi	r24, 0x34	; 52
    307a:	41 f4       	brne	.+16     	; 0x308c <main+0x7de>
    307c:	21 e0       	ldi	r18, 0x01	; 1
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	c5 55       	subi	r28, 0x55	; 85
    3082:	df 4f       	sbci	r29, 0xFF	; 255
    3084:	39 83       	std	Y+1, r19	; 0x01
    3086:	28 83       	st	Y, r18
    3088:	cb 5a       	subi	r28, 0xAB	; 171
    308a:	d0 40       	sbci	r29, 0x00	; 0
    308c:	c3 55       	subi	r28, 0x53	; 83
    308e:	df 4f       	sbci	r29, 0xFF	; 255
    3090:	88 81       	ld	r24, Y
    3092:	99 81       	ldd	r25, Y+1	; 0x01
    3094:	cd 5a       	subi	r28, 0xAD	; 173
    3096:	d0 40       	sbci	r29, 0x00	; 0
    3098:	c5 55       	subi	r28, 0x55	; 85
    309a:	df 4f       	sbci	r29, 0xFF	; 255
    309c:	e8 81       	ld	r30, Y
    309e:	f9 81       	ldd	r31, Y+1	; 0x01
    30a0:	cb 5a       	subi	r28, 0xAB	; 171
    30a2:	d0 40       	sbci	r29, 0x00	; 0
    30a4:	8e 23       	and	r24, r30
    30a6:	9f 23       	and	r25, r31
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	11 f4       	brne	.+4      	; 0x30b0 <main+0x802>
    30ac:	0c 94 83 20 	jmp	0x4106	; 0x4106 <main+0x1858>
					Lcd_sendCmd(CLR_Display);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
					Lcd_sendString_xy("Welcome",1,1);
    30b6:	89 e6       	ldi	r24, 0x69	; 105
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	61 e0       	ldi	r22, 0x01	; 1
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <Lcd_sendString_xy>
    30c2:	fe 01       	movw	r30, r28
    30c4:	e3 59       	subi	r30, 0x93	; 147
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	aa ef       	ldi	r26, 0xFA	; 250
    30ce:	b3 e4       	ldi	r27, 0x43	; 67
    30d0:	80 83       	st	Z, r24
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	a2 83       	std	Z+2, r26	; 0x02
    30d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d8:	8e 01       	movw	r16, r28
    30da:	07 59       	subi	r16, 0x97	; 151
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	fe 01       	movw	r30, r28
    30e0:	e3 59       	subi	r30, 0x93	; 147
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	60 81       	ld	r22, Z
    30e6:	71 81       	ldd	r23, Z+1	; 0x01
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	4a ef       	ldi	r20, 0xFA	; 250
    30f2:	54 e4       	ldi	r21, 0x44	; 68
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	f8 01       	movw	r30, r16
    30fe:	80 83       	st	Z, r24
    3100:	91 83       	std	Z+1, r25	; 0x01
    3102:	a2 83       	std	Z+2, r26	; 0x02
    3104:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3106:	fe 01       	movw	r30, r28
    3108:	e7 59       	subi	r30, 0x97	; 151
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	44 f4       	brge	.+16     	; 0x3134 <main+0x886>
		__ticks = 1;
    3124:	fe 01       	movw	r30, r28
    3126:	e9 59       	subi	r30, 0x99	; 153
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24
    3132:	64 c0       	rjmp	.+200    	; 0x31fc <main+0x94e>
	else if (__tmp > 65535)
    3134:	fe 01       	movw	r30, r28
    3136:	e7 59       	subi	r30, 0x97	; 151
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	0c f0       	brlt	.+2      	; 0x3154 <main+0x8a6>
    3152:	43 c0       	rjmp	.+134    	; 0x31da <main+0x92c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3154:	fe 01       	movw	r30, r28
    3156:	e3 59       	subi	r30, 0x93	; 147
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e2       	ldi	r20, 0x20	; 32
    3168:	51 e4       	ldi	r21, 0x41	; 65
    316a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	8e 01       	movw	r16, r28
    3174:	09 59       	subi	r16, 0x99	; 153
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	f8 01       	movw	r30, r16
    3186:	91 83       	std	Z+1, r25	; 0x01
    3188:	80 83       	st	Z, r24
    318a:	1f c0       	rjmp	.+62     	; 0x31ca <main+0x91c>
    318c:	fe 01       	movw	r30, r28
    318e:	eb 59       	subi	r30, 0x9B	; 155
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	91 83       	std	Z+1, r25	; 0x01
    3198:	80 83       	st	Z, r24
    319a:	fe 01       	movw	r30, r28
    319c:	eb 59       	subi	r30, 0x9B	; 155
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	91 81       	ldd	r25, Z+1	; 0x01
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	f1 f7       	brne	.-4      	; 0x31a4 <main+0x8f6>
    31a8:	fe 01       	movw	r30, r28
    31aa:	eb 59       	subi	r30, 0x9B	; 155
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b2:	de 01       	movw	r26, r28
    31b4:	a9 59       	subi	r26, 0x99	; 153
    31b6:	bf 4f       	sbci	r27, 0xFF	; 255
    31b8:	fe 01       	movw	r30, r28
    31ba:	e9 59       	subi	r30, 0x99	; 153
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	80 81       	ld	r24, Z
    31c0:	91 81       	ldd	r25, Z+1	; 0x01
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	11 96       	adiw	r26, 0x01	; 1
    31c6:	9c 93       	st	X, r25
    31c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	fe 01       	movw	r30, r28
    31cc:	e9 59       	subi	r30, 0x99	; 153
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	91 81       	ldd	r25, Z+1	; 0x01
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	d1 f6       	brne	.-76     	; 0x318c <main+0x8de>
    31d8:	27 c0       	rjmp	.+78     	; 0x3228 <main+0x97a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31da:	8e 01       	movw	r16, r28
    31dc:	09 59       	subi	r16, 0x99	; 153
    31de:	1f 4f       	sbci	r17, 0xFF	; 255
    31e0:	fe 01       	movw	r30, r28
    31e2:	e7 59       	subi	r30, 0x97	; 151
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	f8 01       	movw	r30, r16
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	80 83       	st	Z, r24
    31fc:	de 01       	movw	r26, r28
    31fe:	ad 59       	subi	r26, 0x9D	; 157
    3200:	bf 4f       	sbci	r27, 0xFF	; 255
    3202:	fe 01       	movw	r30, r28
    3204:	e9 59       	subi	r30, 0x99	; 153
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	8d 93       	st	X+, r24
    320e:	9c 93       	st	X, r25
    3210:	fe 01       	movw	r30, r28
    3212:	ed 59       	subi	r30, 0x9D	; 157
    3214:	ff 4f       	sbci	r31, 0xFF	; 255
    3216:	80 81       	ld	r24, Z
    3218:	91 81       	ldd	r25, Z+1	; 0x01
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <main+0x96c>
    321e:	fe 01       	movw	r30, r28
    3220:	ed 59       	subi	r30, 0x9D	; 157
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
					_delay_ms(500);

while(1){
	Lcd_sendCmd(Force2ndline);
    3228:	80 ec       	ldi	r24, 0xC0	; 192
    322a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
		/* Receiving the first digit of the first number */
		do {
			Process[count] = KP_getPressedButton();
    322e:	80 91 ec 00 	lds	r24, 0x00EC
    3232:	08 2f       	mov	r16, r24
    3234:	10 e0       	ldi	r17, 0x00	; 0
    3236:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    323a:	f8 01       	movw	r30, r16
    323c:	ec 51       	subi	r30, 0x1C	; 28
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 83       	st	Z, r24
		} while (Process[count] == KP_RELEASED);
    3242:	80 91 ec 00 	lds	r24, 0x00EC
    3246:	88 2f       	mov	r24, r24
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	fc 01       	movw	r30, r24
    324c:	ec 51       	subi	r30, 0x1C	; 28
    324e:	ff 4f       	sbci	r31, 0xFF	; 255
    3250:	80 81       	ld	r24, Z
    3252:	8f 3f       	cpi	r24, 0xFF	; 255
    3254:	61 f3       	breq	.-40     	; 0x322e <main+0x980>
		if (Process[count] == 'A' || Process[count] == '='
    3256:	80 91 ec 00 	lds	r24, 0x00EC
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	fc 01       	movw	r30, r24
    3260:	ec 51       	subi	r30, 0x1C	; 28
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	81 34       	cpi	r24, 0x41	; 65
    3268:	91 f1       	breq	.+100    	; 0x32ce <main+0xa20>
    326a:	80 91 ec 00 	lds	r24, 0x00EC
    326e:	88 2f       	mov	r24, r24
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	fc 01       	movw	r30, r24
    3274:	ec 51       	subi	r30, 0x1C	; 28
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	80 81       	ld	r24, Z
    327a:	8d 33       	cpi	r24, 0x3D	; 61
    327c:	41 f1       	breq	.+80     	; 0x32ce <main+0xa20>
    327e:	80 91 ec 00 	lds	r24, 0x00EC
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	fc 01       	movw	r30, r24
    3288:	ec 51       	subi	r30, 0x1C	; 28
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	80 81       	ld	r24, Z
    328e:	8b 32       	cpi	r24, 0x2B	; 43
    3290:	f1 f0       	breq	.+60     	; 0x32ce <main+0xa20>
    3292:	80 91 ec 00 	lds	r24, 0x00EC
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	fc 01       	movw	r30, r24
    329c:	ec 51       	subi	r30, 0x1C	; 28
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 81       	ld	r24, Z
    32a2:	8d 32       	cpi	r24, 0x2D	; 45
    32a4:	a1 f0       	breq	.+40     	; 0x32ce <main+0xa20>
    32a6:	80 91 ec 00 	lds	r24, 0x00EC
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	fc 01       	movw	r30, r24
    32b0:	ec 51       	subi	r30, 0x1C	; 28
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 81       	ld	r24, Z
    32b6:	8a 32       	cpi	r24, 0x2A	; 42
    32b8:	51 f0       	breq	.+20     	; 0x32ce <main+0xa20>
    32ba:	80 91 ec 00 	lds	r24, 0x00EC
    32be:	88 2f       	mov	r24, r24
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	fc 01       	movw	r30, r24
    32c4:	ec 51       	subi	r30, 0x1C	; 28
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 81       	ld	r24, Z
    32ca:	8f 32       	cpi	r24, 0x2F	; 47
    32cc:	21 f4       	brne	.+8      	; 0x32d6 <main+0xa28>
				|| Process[count] == '+' || Process[count] == '-'
				|| Process[count] == '*' || Process[count] == '/') {
			Lcd_sendCmd(CLR_Display);
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    32d4:	04 cb       	rjmp	.-2552   	; 0x28de <main+0x30>
			goto label ;
		} else {
			Lcd_sendChar(Process[count]);
    32d6:	80 91 ec 00 	lds	r24, 0x00EC
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	fc 01       	movw	r30, r24
    32e0:	ec 51       	subi	r30, 0x1C	; 28
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
		}
		count++;
    32ea:	80 91 ec 00 	lds	r24, 0x00EC
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	80 93 ec 00 	sts	0x00EC, r24
    32f4:	fe 01       	movw	r30, r28
    32f6:	e1 5a       	subi	r30, 0xA1	; 161
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	a6 e9       	ldi	r26, 0x96	; 150
    3300:	b3 e4       	ldi	r27, 0x43	; 67
    3302:	80 83       	st	Z, r24
    3304:	91 83       	std	Z+1, r25	; 0x01
    3306:	a2 83       	std	Z+2, r26	; 0x02
    3308:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330a:	8e 01       	movw	r16, r28
    330c:	05 5a       	subi	r16, 0xA5	; 165
    330e:	1f 4f       	sbci	r17, 0xFF	; 255
    3310:	fe 01       	movw	r30, r28
    3312:	e1 5a       	subi	r30, 0xA1	; 161
    3314:	ff 4f       	sbci	r31, 0xFF	; 255
    3316:	60 81       	ld	r22, Z
    3318:	71 81       	ldd	r23, Z+1	; 0x01
    331a:	82 81       	ldd	r24, Z+2	; 0x02
    331c:	93 81       	ldd	r25, Z+3	; 0x03
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4a ef       	ldi	r20, 0xFA	; 250
    3324:	54 e4       	ldi	r21, 0x44	; 68
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	f8 01       	movw	r30, r16
    3330:	80 83       	st	Z, r24
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	a2 83       	std	Z+2, r26	; 0x02
    3336:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3338:	fe 01       	movw	r30, r28
    333a:	e5 5a       	subi	r30, 0xA5	; 165
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	60 81       	ld	r22, Z
    3340:	71 81       	ldd	r23, Z+1	; 0x01
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	44 f4       	brge	.+16     	; 0x3366 <main+0xab8>
		__ticks = 1;
    3356:	fe 01       	movw	r30, r28
    3358:	e7 5a       	subi	r30, 0xA7	; 167
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
    3364:	64 c0       	rjmp	.+200    	; 0x342e <main+0xb80>
	else if (__tmp > 65535)
    3366:	fe 01       	movw	r30, r28
    3368:	e5 5a       	subi	r30, 0xA5	; 165
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	3f ef       	ldi	r19, 0xFF	; 255
    3378:	4f e7       	ldi	r20, 0x7F	; 127
    337a:	57 e4       	ldi	r21, 0x47	; 71
    337c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3380:	18 16       	cp	r1, r24
    3382:	0c f0       	brlt	.+2      	; 0x3386 <main+0xad8>
    3384:	43 c0       	rjmp	.+134    	; 0x340c <main+0xb5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3386:	fe 01       	movw	r30, r28
    3388:	e1 5a       	subi	r30, 0xA1	; 161
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	60 81       	ld	r22, Z
    338e:	71 81       	ldd	r23, Z+1	; 0x01
    3390:	82 81       	ldd	r24, Z+2	; 0x02
    3392:	93 81       	ldd	r25, Z+3	; 0x03
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	40 e2       	ldi	r20, 0x20	; 32
    339a:	51 e4       	ldi	r21, 0x41	; 65
    339c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	8e 01       	movw	r16, r28
    33a6:	07 5a       	subi	r16, 0xA7	; 167
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	f8 01       	movw	r30, r16
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
    33bc:	1f c0       	rjmp	.+62     	; 0x33fc <main+0xb4e>
    33be:	fe 01       	movw	r30, r28
    33c0:	e9 5a       	subi	r30, 0xA9	; 169
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	91 83       	std	Z+1, r25	; 0x01
    33ca:	80 83       	st	Z, r24
    33cc:	fe 01       	movw	r30, r28
    33ce:	e9 5a       	subi	r30, 0xA9	; 169
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <main+0xb28>
    33da:	fe 01       	movw	r30, r28
    33dc:	e9 5a       	subi	r30, 0xA9	; 169
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	de 01       	movw	r26, r28
    33e6:	a7 5a       	subi	r26, 0xA7	; 167
    33e8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ea:	fe 01       	movw	r30, r28
    33ec:	e7 5a       	subi	r30, 0xA7	; 167
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 81       	ld	r24, Z
    33f2:	91 81       	ldd	r25, Z+1	; 0x01
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	11 96       	adiw	r26, 0x01	; 1
    33f8:	9c 93       	st	X, r25
    33fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	fe 01       	movw	r30, r28
    33fe:	e7 5a       	subi	r30, 0xA7	; 167
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	d1 f6       	brne	.-76     	; 0x33be <main+0xb10>
    340a:	27 c0       	rjmp	.+78     	; 0x345a <main+0xbac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340c:	8e 01       	movw	r16, r28
    340e:	07 5a       	subi	r16, 0xA7	; 167
    3410:	1f 4f       	sbci	r17, 0xFF	; 255
    3412:	fe 01       	movw	r30, r28
    3414:	e5 5a       	subi	r30, 0xA5	; 165
    3416:	ff 4f       	sbci	r31, 0xFF	; 255
    3418:	60 81       	ld	r22, Z
    341a:	71 81       	ldd	r23, Z+1	; 0x01
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	93 81       	ldd	r25, Z+3	; 0x03
    3420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	f8 01       	movw	r30, r16
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	de 01       	movw	r26, r28
    3430:	ab 5a       	subi	r26, 0xAB	; 171
    3432:	bf 4f       	sbci	r27, 0xFF	; 255
    3434:	fe 01       	movw	r30, r28
    3436:	e7 5a       	subi	r30, 0xA7	; 167
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	8d 93       	st	X+, r24
    3440:	9c 93       	st	X, r25
    3442:	fe 01       	movw	r30, r28
    3444:	eb 5a       	subi	r30, 0xAB	; 171
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	91 81       	ldd	r25, Z+1	; 0x01
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <main+0xb9e>
    3450:	fe 01       	movw	r30, r28
    3452:	eb 5a       	subi	r30, 0xAB	; 171
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
		_delay_ms(300);
		/* Receiving the second digit of the first number */
		do {
			Process[count] = KP_getPressedButton();
    345a:	80 91 ec 00 	lds	r24, 0x00EC
    345e:	08 2f       	mov	r16, r24
    3460:	10 e0       	ldi	r17, 0x00	; 0
    3462:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    3466:	f8 01       	movw	r30, r16
    3468:	ec 51       	subi	r30, 0x1C	; 28
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 83       	st	Z, r24
		} while (Process[count] == KP_RELEASED);
    346e:	80 91 ec 00 	lds	r24, 0x00EC
    3472:	88 2f       	mov	r24, r24
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	fc 01       	movw	r30, r24
    3478:	ec 51       	subi	r30, 0x1C	; 28
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	80 81       	ld	r24, Z
    347e:	8f 3f       	cpi	r24, 0xFF	; 255
    3480:	61 f3       	breq	.-40     	; 0x345a <main+0xbac>
		if (Process[count] == 'A' || Process[count] == '='
    3482:	80 91 ec 00 	lds	r24, 0x00EC
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	fc 01       	movw	r30, r24
    348c:	ec 51       	subi	r30, 0x1C	; 28
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	81 34       	cpi	r24, 0x41	; 65
    3494:	91 f1       	breq	.+100    	; 0x34fa <main+0xc4c>
    3496:	80 91 ec 00 	lds	r24, 0x00EC
    349a:	88 2f       	mov	r24, r24
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	fc 01       	movw	r30, r24
    34a0:	ec 51       	subi	r30, 0x1C	; 28
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	8d 33       	cpi	r24, 0x3D	; 61
    34a8:	41 f1       	breq	.+80     	; 0x34fa <main+0xc4c>
    34aa:	80 91 ec 00 	lds	r24, 0x00EC
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	fc 01       	movw	r30, r24
    34b4:	ec 51       	subi	r30, 0x1C	; 28
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	8b 32       	cpi	r24, 0x2B	; 43
    34bc:	f1 f0       	breq	.+60     	; 0x34fa <main+0xc4c>
    34be:	80 91 ec 00 	lds	r24, 0x00EC
    34c2:	88 2f       	mov	r24, r24
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	fc 01       	movw	r30, r24
    34c8:	ec 51       	subi	r30, 0x1C	; 28
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	80 81       	ld	r24, Z
    34ce:	8d 32       	cpi	r24, 0x2D	; 45
    34d0:	a1 f0       	breq	.+40     	; 0x34fa <main+0xc4c>
    34d2:	80 91 ec 00 	lds	r24, 0x00EC
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	fc 01       	movw	r30, r24
    34dc:	ec 51       	subi	r30, 0x1C	; 28
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	8a 32       	cpi	r24, 0x2A	; 42
    34e4:	51 f0       	breq	.+20     	; 0x34fa <main+0xc4c>
    34e6:	80 91 ec 00 	lds	r24, 0x00EC
    34ea:	88 2f       	mov	r24, r24
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	fc 01       	movw	r30, r24
    34f0:	ec 51       	subi	r30, 0x1C	; 28
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	8f 32       	cpi	r24, 0x2F	; 47
    34f8:	21 f4       	brne	.+8      	; 0x3502 <main+0xc54>
				|| Process[count] == '+' || Process[count] == '-'
				|| Process[count] == '*' || Process[count] == '/') {
			Lcd_sendCmd(CLR_Display);
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    3500:	ee c9       	rjmp	.-3108   	; 0x28de <main+0x30>
			goto label ;
		} else {
			Lcd_sendChar(Process[count]);
    3502:	80 91 ec 00 	lds	r24, 0x00EC
    3506:	88 2f       	mov	r24, r24
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	fc 01       	movw	r30, r24
    350c:	ec 51       	subi	r30, 0x1C	; 28
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
		}
		count++;
    3516:	80 91 ec 00 	lds	r24, 0x00EC
    351a:	8f 5f       	subi	r24, 0xFF	; 255
    351c:	80 93 ec 00 	sts	0x00EC, r24
    3520:	fe 01       	movw	r30, r28
    3522:	ef 5a       	subi	r30, 0xAF	; 175
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a6 e9       	ldi	r26, 0x96	; 150
    352c:	b3 e4       	ldi	r27, 0x43	; 67
    352e:	80 83       	st	Z, r24
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	a2 83       	std	Z+2, r26	; 0x02
    3534:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3536:	8e 01       	movw	r16, r28
    3538:	03 5b       	subi	r16, 0xB3	; 179
    353a:	1f 4f       	sbci	r17, 0xFF	; 255
    353c:	fe 01       	movw	r30, r28
    353e:	ef 5a       	subi	r30, 0xAF	; 175
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	4a ef       	ldi	r20, 0xFA	; 250
    3550:	54 e4       	ldi	r21, 0x44	; 68
    3552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	f8 01       	movw	r30, r16
    355c:	80 83       	st	Z, r24
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	a2 83       	std	Z+2, r26	; 0x02
    3562:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3564:	fe 01       	movw	r30, r28
    3566:	e3 5b       	subi	r30, 0xB3	; 179
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	60 81       	ld	r22, Z
    356c:	71 81       	ldd	r23, Z+1	; 0x01
    356e:	82 81       	ldd	r24, Z+2	; 0x02
    3570:	93 81       	ldd	r25, Z+3	; 0x03
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	40 e8       	ldi	r20, 0x80	; 128
    3578:	5f e3       	ldi	r21, 0x3F	; 63
    357a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    357e:	88 23       	and	r24, r24
    3580:	44 f4       	brge	.+16     	; 0x3592 <main+0xce4>
		__ticks = 1;
    3582:	fe 01       	movw	r30, r28
    3584:	e5 5b       	subi	r30, 0xB5	; 181
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	80 83       	st	Z, r24
    3590:	64 c0       	rjmp	.+200    	; 0x365a <main+0xdac>
	else if (__tmp > 65535)
    3592:	fe 01       	movw	r30, r28
    3594:	e3 5b       	subi	r30, 0xB3	; 179
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	82 81       	ldd	r24, Z+2	; 0x02
    359e:	93 81       	ldd	r25, Z+3	; 0x03
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	3f ef       	ldi	r19, 0xFF	; 255
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	57 e4       	ldi	r21, 0x47	; 71
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	0c f0       	brlt	.+2      	; 0x35b2 <main+0xd04>
    35b0:	43 c0       	rjmp	.+134    	; 0x3638 <main+0xd8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b2:	fe 01       	movw	r30, r28
    35b4:	ef 5a       	subi	r30, 0xAF	; 175
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	60 81       	ld	r22, Z
    35ba:	71 81       	ldd	r23, Z+1	; 0x01
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	93 81       	ldd	r25, Z+3	; 0x03
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	40 e2       	ldi	r20, 0x20	; 32
    35c6:	51 e4       	ldi	r21, 0x41	; 65
    35c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	8e 01       	movw	r16, r28
    35d2:	05 5b       	subi	r16, 0xB5	; 181
    35d4:	1f 4f       	sbci	r17, 0xFF	; 255
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	f8 01       	movw	r30, r16
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
    35e8:	1f c0       	rjmp	.+62     	; 0x3628 <main+0xd7a>
    35ea:	fe 01       	movw	r30, r28
    35ec:	e7 5b       	subi	r30, 0xB7	; 183
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	88 ec       	ldi	r24, 0xC8	; 200
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	91 83       	std	Z+1, r25	; 0x01
    35f6:	80 83       	st	Z, r24
    35f8:	fe 01       	movw	r30, r28
    35fa:	e7 5b       	subi	r30, 0xB7	; 183
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <main+0xd54>
    3606:	fe 01       	movw	r30, r28
    3608:	e7 5b       	subi	r30, 0xB7	; 183
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3610:	de 01       	movw	r26, r28
    3612:	a5 5b       	subi	r26, 0xB5	; 181
    3614:	bf 4f       	sbci	r27, 0xFF	; 255
    3616:	fe 01       	movw	r30, r28
    3618:	e5 5b       	subi	r30, 0xB5	; 181
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	11 96       	adiw	r26, 0x01	; 1
    3624:	9c 93       	st	X, r25
    3626:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3628:	fe 01       	movw	r30, r28
    362a:	e5 5b       	subi	r30, 0xB5	; 181
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	00 97       	sbiw	r24, 0x00	; 0
    3634:	d1 f6       	brne	.-76     	; 0x35ea <main+0xd3c>
    3636:	27 c0       	rjmp	.+78     	; 0x3686 <main+0xdd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3638:	8e 01       	movw	r16, r28
    363a:	05 5b       	subi	r16, 0xB5	; 181
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	fe 01       	movw	r30, r28
    3640:	e3 5b       	subi	r30, 0xB3	; 179
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	f8 01       	movw	r30, r16
    3656:	91 83       	std	Z+1, r25	; 0x01
    3658:	80 83       	st	Z, r24
    365a:	de 01       	movw	r26, r28
    365c:	a9 5b       	subi	r26, 0xB9	; 185
    365e:	bf 4f       	sbci	r27, 0xFF	; 255
    3660:	fe 01       	movw	r30, r28
    3662:	e5 5b       	subi	r30, 0xB5	; 181
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 81       	ld	r24, Z
    3668:	91 81       	ldd	r25, Z+1	; 0x01
    366a:	8d 93       	st	X+, r24
    366c:	9c 93       	st	X, r25
    366e:	fe 01       	movw	r30, r28
    3670:	e9 5b       	subi	r30, 0xB9	; 185
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	80 81       	ld	r24, Z
    3676:	91 81       	ldd	r25, Z+1	; 0x01
    3678:	01 97       	sbiw	r24, 0x01	; 1
    367a:	f1 f7       	brne	.-4      	; 0x3678 <main+0xdca>
    367c:	fe 01       	movw	r30, r28
    367e:	e9 5b       	subi	r30, 0xB9	; 185
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	91 83       	std	Z+1, r25	; 0x01
    3684:	80 83       	st	Z, r24
		_delay_ms(300);
		/* Receiving the operation */
		do {
			Process[count] = KP_getPressedButton();
    3686:	80 91 ec 00 	lds	r24, 0x00EC
    368a:	08 2f       	mov	r16, r24
    368c:	10 e0       	ldi	r17, 0x00	; 0
    368e:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    3692:	f8 01       	movw	r30, r16
    3694:	ec 51       	subi	r30, 0x1C	; 28
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	80 83       	st	Z, r24

		} while (Process[count] == KP_RELEASED);
    369a:	80 91 ec 00 	lds	r24, 0x00EC
    369e:	88 2f       	mov	r24, r24
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	fc 01       	movw	r30, r24
    36a4:	ec 51       	subi	r30, 0x1C	; 28
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 81       	ld	r24, Z
    36aa:	8f 3f       	cpi	r24, 0xFF	; 255
    36ac:	61 f3       	breq	.-40     	; 0x3686 <main+0xdd8>

		if (Process[count] == 'A' || Process[count] == '=') {
    36ae:	80 91 ec 00 	lds	r24, 0x00EC
    36b2:	88 2f       	mov	r24, r24
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	fc 01       	movw	r30, r24
    36b8:	ec 51       	subi	r30, 0x1C	; 28
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 81       	ld	r24, Z
    36be:	81 34       	cpi	r24, 0x41	; 65
    36c0:	51 f0       	breq	.+20     	; 0x36d6 <main+0xe28>
    36c2:	80 91 ec 00 	lds	r24, 0x00EC
    36c6:	88 2f       	mov	r24, r24
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	fc 01       	movw	r30, r24
    36cc:	ec 51       	subi	r30, 0x1C	; 28
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	80 81       	ld	r24, Z
    36d2:	8d 33       	cpi	r24, 0x3D	; 61
    36d4:	21 f4       	brne	.+8      	; 0x36de <main+0xe30>
			Lcd_sendCmd(CLR_Display);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    36dc:	00 c9       	rjmp	.-3584   	; 0x28de <main+0x30>
			goto label ;
		} else {
			Lcd_sendChar(Process[count]);
    36de:	80 91 ec 00 	lds	r24, 0x00EC
    36e2:	88 2f       	mov	r24, r24
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	fc 01       	movw	r30, r24
    36e8:	ec 51       	subi	r30, 0x1C	; 28
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
		}
		count++;
    36f2:	80 91 ec 00 	lds	r24, 0x00EC
    36f6:	8f 5f       	subi	r24, 0xFF	; 255
    36f8:	80 93 ec 00 	sts	0x00EC, r24
    36fc:	fe 01       	movw	r30, r28
    36fe:	ed 5b       	subi	r30, 0xBD	; 189
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a6 e9       	ldi	r26, 0x96	; 150
    3708:	b3 e4       	ldi	r27, 0x43	; 67
    370a:	80 83       	st	Z, r24
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	a2 83       	std	Z+2, r26	; 0x02
    3710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	8e 01       	movw	r16, r28
    3714:	01 5c       	subi	r16, 0xC1	; 193
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	fe 01       	movw	r30, r28
    371a:	ed 5b       	subi	r30, 0xBD	; 189
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	4a ef       	ldi	r20, 0xFA	; 250
    372c:	54 e4       	ldi	r21, 0x44	; 68
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	f8 01       	movw	r30, r16
    3738:	80 83       	st	Z, r24
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	a2 83       	std	Z+2, r26	; 0x02
    373e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3740:	fe 01       	movw	r30, r28
    3742:	ff 96       	adiw	r30, 0x3f	; 63
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3758:	88 23       	and	r24, r24
    375a:	2c f4       	brge	.+10     	; 0x3766 <main+0xeb8>
		__ticks = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9e af       	std	Y+62, r25	; 0x3e
    3762:	8d af       	std	Y+61, r24	; 0x3d
    3764:	46 c0       	rjmp	.+140    	; 0x37f2 <main+0xf44>
	else if (__tmp > 65535)
    3766:	fe 01       	movw	r30, r28
    3768:	ff 96       	adiw	r30, 0x3f	; 63
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	3f ef       	ldi	r19, 0xFF	; 255
    3776:	4f e7       	ldi	r20, 0x7F	; 127
    3778:	57 e4       	ldi	r21, 0x47	; 71
    377a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    377e:	18 16       	cp	r1, r24
    3780:	64 f5       	brge	.+88     	; 0x37da <main+0xf2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3782:	fe 01       	movw	r30, r28
    3784:	ed 5b       	subi	r30, 0xBD	; 189
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	60 81       	ld	r22, Z
    378a:	71 81       	ldd	r23, Z+1	; 0x01
    378c:	82 81       	ldd	r24, Z+2	; 0x02
    378e:	93 81       	ldd	r25, Z+3	; 0x03
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e2       	ldi	r20, 0x20	; 32
    3796:	51 e4       	ldi	r21, 0x41	; 65
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	bc 01       	movw	r22, r24
    37a2:	cd 01       	movw	r24, r26
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e af       	std	Y+62, r25	; 0x3e
    37ae:	8d af       	std	Y+61, r24	; 0x3d
    37b0:	0f c0       	rjmp	.+30     	; 0x37d0 <main+0xf22>
    37b2:	88 ec       	ldi	r24, 0xC8	; 200
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	9c af       	std	Y+60, r25	; 0x3c
    37b8:	8b af       	std	Y+59, r24	; 0x3b
    37ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    37bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	f1 f7       	brne	.-4      	; 0x37be <main+0xf10>
    37c2:	9c af       	std	Y+60, r25	; 0x3c
    37c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	9e af       	std	Y+62, r25	; 0x3e
    37ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    37d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	69 f7       	brne	.-38     	; 0x37b2 <main+0xf04>
    37d8:	16 c0       	rjmp	.+44     	; 0x3806 <main+0xf58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37da:	fe 01       	movw	r30, r28
    37dc:	ff 96       	adiw	r30, 0x3f	; 63
    37de:	60 81       	ld	r22, Z
    37e0:	71 81       	ldd	r23, Z+1	; 0x01
    37e2:	82 81       	ldd	r24, Z+2	; 0x02
    37e4:	93 81       	ldd	r25, Z+3	; 0x03
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	9e af       	std	Y+62, r25	; 0x3e
    37f0:	8d af       	std	Y+61, r24	; 0x3d
    37f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    37f6:	9a af       	std	Y+58, r25	; 0x3a
    37f8:	89 af       	std	Y+57, r24	; 0x39
    37fa:	89 ad       	ldd	r24, Y+57	; 0x39
    37fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <main+0xf50>
    3802:	9a af       	std	Y+58, r25	; 0x3a
    3804:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(300);
		/* Receiving the first digit of the second number */
		do {
			Process[count] = KP_getPressedButton();
    3806:	80 91 ec 00 	lds	r24, 0x00EC
    380a:	08 2f       	mov	r16, r24
    380c:	10 e0       	ldi	r17, 0x00	; 0
    380e:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    3812:	f8 01       	movw	r30, r16
    3814:	ec 51       	subi	r30, 0x1C	; 28
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	80 83       	st	Z, r24
		} while (Process[count] == KP_RELEASED);
    381a:	80 91 ec 00 	lds	r24, 0x00EC
    381e:	88 2f       	mov	r24, r24
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	fc 01       	movw	r30, r24
    3824:	ec 51       	subi	r30, 0x1C	; 28
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	80 81       	ld	r24, Z
    382a:	8f 3f       	cpi	r24, 0xFF	; 255
    382c:	61 f3       	breq	.-40     	; 0x3806 <main+0xf58>
		if (Process[count] == 'A' || Process[count] == '='
    382e:	80 91 ec 00 	lds	r24, 0x00EC
    3832:	88 2f       	mov	r24, r24
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	fc 01       	movw	r30, r24
    3838:	ec 51       	subi	r30, 0x1C	; 28
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	81 34       	cpi	r24, 0x41	; 65
    3840:	91 f1       	breq	.+100    	; 0x38a6 <main+0xff8>
    3842:	80 91 ec 00 	lds	r24, 0x00EC
    3846:	88 2f       	mov	r24, r24
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	fc 01       	movw	r30, r24
    384c:	ec 51       	subi	r30, 0x1C	; 28
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	8d 33       	cpi	r24, 0x3D	; 61
    3854:	41 f1       	breq	.+80     	; 0x38a6 <main+0xff8>
    3856:	80 91 ec 00 	lds	r24, 0x00EC
    385a:	88 2f       	mov	r24, r24
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	fc 01       	movw	r30, r24
    3860:	ec 51       	subi	r30, 0x1C	; 28
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	80 81       	ld	r24, Z
    3866:	8b 32       	cpi	r24, 0x2B	; 43
    3868:	f1 f0       	breq	.+60     	; 0x38a6 <main+0xff8>
    386a:	80 91 ec 00 	lds	r24, 0x00EC
    386e:	88 2f       	mov	r24, r24
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	fc 01       	movw	r30, r24
    3874:	ec 51       	subi	r30, 0x1C	; 28
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	8d 32       	cpi	r24, 0x2D	; 45
    387c:	a1 f0       	breq	.+40     	; 0x38a6 <main+0xff8>
    387e:	80 91 ec 00 	lds	r24, 0x00EC
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	fc 01       	movw	r30, r24
    3888:	ec 51       	subi	r30, 0x1C	; 28
    388a:	ff 4f       	sbci	r31, 0xFF	; 255
    388c:	80 81       	ld	r24, Z
    388e:	8a 32       	cpi	r24, 0x2A	; 42
    3890:	51 f0       	breq	.+20     	; 0x38a6 <main+0xff8>
    3892:	80 91 ec 00 	lds	r24, 0x00EC
    3896:	88 2f       	mov	r24, r24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	fc 01       	movw	r30, r24
    389c:	ec 51       	subi	r30, 0x1C	; 28
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 81       	ld	r24, Z
    38a2:	8f 32       	cpi	r24, 0x2F	; 47
    38a4:	29 f4       	brne	.+10     	; 0x38b0 <main+0x1002>
				|| Process[count] == '+' || Process[count] == '-'
				|| Process[count] == '*' || Process[count] == '/') {
			Lcd_sendCmd(CLR_Display);
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    38ac:	0c 94 6f 14 	jmp	0x28de	; 0x28de <main+0x30>
			goto label ;
		} else {
			Lcd_sendChar(Process[count]);
    38b0:	80 91 ec 00 	lds	r24, 0x00EC
    38b4:	88 2f       	mov	r24, r24
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	fc 01       	movw	r30, r24
    38ba:	ec 51       	subi	r30, 0x1C	; 28
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
		}
		count++;
    38c4:	80 91 ec 00 	lds	r24, 0x00EC
    38c8:	8f 5f       	subi	r24, 0xFF	; 255
    38ca:	80 93 ec 00 	sts	0x00EC, r24
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	a6 e9       	ldi	r26, 0x96	; 150
    38d4:	b3 e4       	ldi	r27, 0x43	; 67
    38d6:	8d ab       	std	Y+53, r24	; 0x35
    38d8:	9e ab       	std	Y+54, r25	; 0x36
    38da:	af ab       	std	Y+55, r26	; 0x37
    38dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	6d a9       	ldd	r22, Y+53	; 0x35
    38e0:	7e a9       	ldd	r23, Y+54	; 0x36
    38e2:	8f a9       	ldd	r24, Y+55	; 0x37
    38e4:	98 ad       	ldd	r25, Y+56	; 0x38
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a ef       	ldi	r20, 0xFA	; 250
    38ec:	54 e4       	ldi	r21, 0x44	; 68
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	89 ab       	std	Y+49, r24	; 0x31
    38f8:	9a ab       	std	Y+50, r25	; 0x32
    38fa:	ab ab       	std	Y+51, r26	; 0x33
    38fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3900:	7a a9       	ldd	r23, Y+50	; 0x32
    3902:	8b a9       	ldd	r24, Y+51	; 0x33
    3904:	9c a9       	ldd	r25, Y+52	; 0x34
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <main+0x1072>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	98 ab       	std	Y+48, r25	; 0x30
    391c:	8f a7       	std	Y+47, r24	; 0x2f
    391e:	3f c0       	rjmp	.+126    	; 0x399e <main+0x10f0>
	else if (__tmp > 65535)
    3920:	69 a9       	ldd	r22, Y+49	; 0x31
    3922:	7a a9       	ldd	r23, Y+50	; 0x32
    3924:	8b a9       	ldd	r24, Y+51	; 0x33
    3926:	9c a9       	ldd	r25, Y+52	; 0x34
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <main+0x10dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	6d a9       	ldd	r22, Y+53	; 0x35
    393a:	7e a9       	ldd	r23, Y+54	; 0x36
    393c:	8f a9       	ldd	r24, Y+55	; 0x37
    393e:	98 ad       	ldd	r25, Y+56	; 0x38
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	98 ab       	std	Y+48, r25	; 0x30
    395e:	8f a7       	std	Y+47, r24	; 0x2f
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <main+0x10d2>
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9e a7       	std	Y+46, r25	; 0x2e
    3968:	8d a7       	std	Y+45, r24	; 0x2d
    396a:	8d a5       	ldd	r24, Y+45	; 0x2d
    396c:	9e a5       	ldd	r25, Y+46	; 0x2e
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <main+0x10c0>
    3972:	9e a7       	std	Y+46, r25	; 0x2e
    3974:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8f a5       	ldd	r24, Y+47	; 0x2f
    3978:	98 a9       	ldd	r25, Y+48	; 0x30
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	98 ab       	std	Y+48, r25	; 0x30
    397e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8f a5       	ldd	r24, Y+47	; 0x2f
    3982:	98 a9       	ldd	r25, Y+48	; 0x30
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <main+0x10b4>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <main+0x1104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	69 a9       	ldd	r22, Y+49	; 0x31
    398c:	7a a9       	ldd	r23, Y+50	; 0x32
    398e:	8b a9       	ldd	r24, Y+51	; 0x33
    3990:	9c a9       	ldd	r25, Y+52	; 0x34
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	98 ab       	std	Y+48, r25	; 0x30
    399c:	8f a7       	std	Y+47, r24	; 0x2f
    399e:	8f a5       	ldd	r24, Y+47	; 0x2f
    39a0:	98 a9       	ldd	r25, Y+48	; 0x30
    39a2:	9c a7       	std	Y+44, r25	; 0x2c
    39a4:	8b a7       	std	Y+43, r24	; 0x2b
    39a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    39a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <main+0x10fc>
    39ae:	9c a7       	std	Y+44, r25	; 0x2c
    39b0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);
		/* Receiving the second digit of the second number */
		do {
			Process[count] = KP_getPressedButton();
    39b2:	80 91 ec 00 	lds	r24, 0x00EC
    39b6:	08 2f       	mov	r16, r24
    39b8:	10 e0       	ldi	r17, 0x00	; 0
    39ba:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    39be:	f8 01       	movw	r30, r16
    39c0:	ec 51       	subi	r30, 0x1C	; 28
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 83       	st	Z, r24
		} while (Process[count] == KP_RELEASED);
    39c6:	80 91 ec 00 	lds	r24, 0x00EC
    39ca:	88 2f       	mov	r24, r24
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	fc 01       	movw	r30, r24
    39d0:	ec 51       	subi	r30, 0x1C	; 28
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	80 81       	ld	r24, Z
    39d6:	8f 3f       	cpi	r24, 0xFF	; 255
    39d8:	61 f3       	breq	.-40     	; 0x39b2 <main+0x1104>
		if (Process[count] == 'A' || Process[count] == '='
    39da:	80 91 ec 00 	lds	r24, 0x00EC
    39de:	88 2f       	mov	r24, r24
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	fc 01       	movw	r30, r24
    39e4:	ec 51       	subi	r30, 0x1C	; 28
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	80 81       	ld	r24, Z
    39ea:	81 34       	cpi	r24, 0x41	; 65
    39ec:	91 f1       	breq	.+100    	; 0x3a52 <main+0x11a4>
    39ee:	80 91 ec 00 	lds	r24, 0x00EC
    39f2:	88 2f       	mov	r24, r24
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	fc 01       	movw	r30, r24
    39f8:	ec 51       	subi	r30, 0x1C	; 28
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	80 81       	ld	r24, Z
    39fe:	8d 33       	cpi	r24, 0x3D	; 61
    3a00:	41 f1       	breq	.+80     	; 0x3a52 <main+0x11a4>
    3a02:	80 91 ec 00 	lds	r24, 0x00EC
    3a06:	88 2f       	mov	r24, r24
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	ec 51       	subi	r30, 0x1C	; 28
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	8b 32       	cpi	r24, 0x2B	; 43
    3a14:	f1 f0       	breq	.+60     	; 0x3a52 <main+0x11a4>
    3a16:	80 91 ec 00 	lds	r24, 0x00EC
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	fc 01       	movw	r30, r24
    3a20:	ec 51       	subi	r30, 0x1C	; 28
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	80 81       	ld	r24, Z
    3a26:	8d 32       	cpi	r24, 0x2D	; 45
    3a28:	a1 f0       	breq	.+40     	; 0x3a52 <main+0x11a4>
    3a2a:	80 91 ec 00 	lds	r24, 0x00EC
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	fc 01       	movw	r30, r24
    3a34:	ec 51       	subi	r30, 0x1C	; 28
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	80 81       	ld	r24, Z
    3a3a:	8a 32       	cpi	r24, 0x2A	; 42
    3a3c:	51 f0       	breq	.+20     	; 0x3a52 <main+0x11a4>
    3a3e:	80 91 ec 00 	lds	r24, 0x00EC
    3a42:	88 2f       	mov	r24, r24
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	fc 01       	movw	r30, r24
    3a48:	ec 51       	subi	r30, 0x1C	; 28
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 81       	ld	r24, Z
    3a4e:	8f 32       	cpi	r24, 0x2F	; 47
    3a50:	29 f4       	brne	.+10     	; 0x3a5c <main+0x11ae>
				|| Process[count] == '+' || Process[count] == '-'
				|| Process[count] == '*' || Process[count] == '/') {
			Lcd_sendCmd(CLR_Display);
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    3a58:	0c 94 6f 14 	jmp	0x28de	; 0x28de <main+0x30>
			goto label ;
		} else {
			Lcd_sendChar(Process[count]);
    3a5c:	80 91 ec 00 	lds	r24, 0x00EC
    3a60:	88 2f       	mov	r24, r24
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	fc 01       	movw	r30, r24
    3a66:	ec 51       	subi	r30, 0x1C	; 28
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
		}
		count++;
    3a70:	80 91 ec 00 	lds	r24, 0x00EC
    3a74:	8f 5f       	subi	r24, 0xFF	; 255
    3a76:	80 93 ec 00 	sts	0x00EC, r24
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	a6 e9       	ldi	r26, 0x96	; 150
    3a80:	b3 e4       	ldi	r27, 0x43	; 67
    3a82:	8f a3       	std	Y+39, r24	; 0x27
    3a84:	98 a7       	std	Y+40, r25	; 0x28
    3a86:	a9 a7       	std	Y+41, r26	; 0x29
    3a88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	4a ef       	ldi	r20, 0xFA	; 250
    3a98:	54 e4       	ldi	r21, 0x44	; 68
    3a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	8b a3       	std	Y+35, r24	; 0x23
    3aa4:	9c a3       	std	Y+36, r25	; 0x24
    3aa6:	ad a3       	std	Y+37, r26	; 0x25
    3aa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    3aac:	7c a1       	ldd	r23, Y+36	; 0x24
    3aae:	8d a1       	ldd	r24, Y+37	; 0x25
    3ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e8       	ldi	r20, 0x80	; 128
    3ab8:	5f e3       	ldi	r21, 0x3F	; 63
    3aba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3abe:	88 23       	and	r24, r24
    3ac0:	2c f4       	brge	.+10     	; 0x3acc <main+0x121e>
		__ticks = 1;
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	9a a3       	std	Y+34, r25	; 0x22
    3ac8:	89 a3       	std	Y+33, r24	; 0x21
    3aca:	3f c0       	rjmp	.+126    	; 0x3b4a <main+0x129c>
	else if (__tmp > 65535)
    3acc:	6b a1       	ldd	r22, Y+35	; 0x23
    3ace:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	3f ef       	ldi	r19, 0xFF	; 255
    3ad8:	4f e7       	ldi	r20, 0x7F	; 127
    3ada:	57 e4       	ldi	r21, 0x47	; 71
    3adc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ae0:	18 16       	cp	r1, r24
    3ae2:	4c f5       	brge	.+82     	; 0x3b36 <main+0x1288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    3ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    3ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    3aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e2       	ldi	r20, 0x20	; 32
    3af2:	51 e4       	ldi	r21, 0x41	; 65
    3af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	bc 01       	movw	r22, r24
    3afe:	cd 01       	movw	r24, r26
    3b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	9a a3       	std	Y+34, r25	; 0x22
    3b0a:	89 a3       	std	Y+33, r24	; 0x21
    3b0c:	0f c0       	rjmp	.+30     	; 0x3b2c <main+0x127e>
    3b0e:	88 ec       	ldi	r24, 0xC8	; 200
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	98 a3       	std	Y+32, r25	; 0x20
    3b14:	8f 8f       	std	Y+31, r24	; 0x1f
    3b16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b18:	98 a1       	ldd	r25, Y+32	; 0x20
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	f1 f7       	brne	.-4      	; 0x3b1a <main+0x126c>
    3b1e:	98 a3       	std	Y+32, r25	; 0x20
    3b20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b22:	89 a1       	ldd	r24, Y+33	; 0x21
    3b24:	9a a1       	ldd	r25, Y+34	; 0x22
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	9a a3       	std	Y+34, r25	; 0x22
    3b2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	69 f7       	brne	.-38     	; 0x3b0e <main+0x1260>
    3b34:	14 c0       	rjmp	.+40     	; 0x3b5e <main+0x12b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b36:	6b a1       	ldd	r22, Y+35	; 0x23
    3b38:	7c a1       	ldd	r23, Y+36	; 0x24
    3b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b42:	dc 01       	movw	r26, r24
    3b44:	cb 01       	movw	r24, r22
    3b46:	9a a3       	std	Y+34, r25	; 0x22
    3b48:	89 a3       	std	Y+33, r24	; 0x21
    3b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b50:	8d 8f       	std	Y+29, r24	; 0x1d
    3b52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	f1 f7       	brne	.-4      	; 0x3b56 <main+0x12a8>
    3b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b5c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		/* Receiving the = sign ,then performing operation */
		do {
			Process[count] = KP_getPressedButton();
    3b5e:	80 91 ec 00 	lds	r24, 0x00EC
    3b62:	08 2f       	mov	r16, r24
    3b64:	10 e0       	ldi	r17, 0x00	; 0
    3b66:	0e 94 9c 12 	call	0x2538	; 0x2538 <KP_getPressedButton>
    3b6a:	f8 01       	movw	r30, r16
    3b6c:	ec 51       	subi	r30, 0x1C	; 28
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	80 83       	st	Z, r24

		} while (Process[count] == KP_RELEASED);
    3b72:	80 91 ec 00 	lds	r24, 0x00EC
    3b76:	88 2f       	mov	r24, r24
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	ec 51       	subi	r30, 0x1C	; 28
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	80 81       	ld	r24, Z
    3b82:	8f 3f       	cpi	r24, 0xFF	; 255
    3b84:	61 f3       	breq	.-40     	; 0x3b5e <main+0x12b0>

		if (Process[count] == '=') {
    3b86:	80 91 ec 00 	lds	r24, 0x00EC
    3b8a:	88 2f       	mov	r24, r24
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	fc 01       	movw	r30, r24
    3b90:	ec 51       	subi	r30, 0x1C	; 28
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	8d 33       	cpi	r24, 0x3D	; 61
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <main+0x12ee>
    3b9a:	37 c2       	rjmp	.+1134   	; 0x400a <main+0x175c>
			Lcd_sendChar(Process[count]);
    3b9c:	80 91 ec 00 	lds	r24, 0x00EC
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	ec 51       	subi	r30, 0x1C	; 28
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 81       	ld	r24, Z
    3bac:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
			switch(Process[count-3]){
    3bb0:	80 91 ec 00 	lds	r24, 0x00EC
    3bb4:	88 2f       	mov	r24, r24
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	03 97       	sbiw	r24, 0x03	; 3
    3bba:	fc 01       	movw	r30, r24
    3bbc:	ec 51       	subi	r30, 0x1C	; 28
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 81       	ld	r24, Z
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	c7 55       	subi	r28, 0x57	; 87
    3bc8:	df 4f       	sbci	r29, 0xFF	; 255
    3bca:	39 83       	std	Y+1, r19	; 0x01
    3bcc:	28 83       	st	Y, r18
    3bce:	c9 5a       	subi	r28, 0xA9	; 169
    3bd0:	d0 40       	sbci	r29, 0x00	; 0
    3bd2:	c7 55       	subi	r28, 0x57	; 87
    3bd4:	df 4f       	sbci	r29, 0xFF	; 255
    3bd6:	88 81       	ld	r24, Y
    3bd8:	99 81       	ldd	r25, Y+1	; 0x01
    3bda:	c9 5a       	subi	r28, 0xA9	; 169
    3bdc:	d0 40       	sbci	r29, 0x00	; 0
    3bde:	8b 32       	cpi	r24, 0x2B	; 43
    3be0:	91 05       	cpc	r25, r1
    3be2:	49 f1       	breq	.+82     	; 0x3c36 <main+0x1388>
    3be4:	c7 55       	subi	r28, 0x57	; 87
    3be6:	df 4f       	sbci	r29, 0xFF	; 255
    3be8:	e8 81       	ld	r30, Y
    3bea:	f9 81       	ldd	r31, Y+1	; 0x01
    3bec:	c9 5a       	subi	r28, 0xA9	; 169
    3bee:	d0 40       	sbci	r29, 0x00	; 0
    3bf0:	ec 32       	cpi	r30, 0x2C	; 44
    3bf2:	f1 05       	cpc	r31, r1
    3bf4:	5c f4       	brge	.+22     	; 0x3c0c <main+0x135e>
    3bf6:	c7 55       	subi	r28, 0x57	; 87
    3bf8:	df 4f       	sbci	r29, 0xFF	; 255
    3bfa:	28 81       	ld	r18, Y
    3bfc:	39 81       	ldd	r19, Y+1	; 0x01
    3bfe:	c9 5a       	subi	r28, 0xA9	; 169
    3c00:	d0 40       	sbci	r29, 0x00	; 0
    3c02:	2a 32       	cpi	r18, 0x2A	; 42
    3c04:	31 05       	cpc	r19, r1
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <main+0x135c>
    3c08:	d1 c0       	rjmp	.+418    	; 0x3dac <main+0x14fe>
    3c0a:	8c c1       	rjmp	.+792    	; 0x3f24 <main+0x1676>
    3c0c:	c7 55       	subi	r28, 0x57	; 87
    3c0e:	df 4f       	sbci	r29, 0xFF	; 255
    3c10:	88 81       	ld	r24, Y
    3c12:	99 81       	ldd	r25, Y+1	; 0x01
    3c14:	c9 5a       	subi	r28, 0xA9	; 169
    3c16:	d0 40       	sbci	r29, 0x00	; 0
    3c18:	8d 32       	cpi	r24, 0x2D	; 45
    3c1a:	91 05       	cpc	r25, r1
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <main+0x1372>
    3c1e:	65 c0       	rjmp	.+202    	; 0x3cea <main+0x143c>
    3c20:	c7 55       	subi	r28, 0x57	; 87
    3c22:	df 4f       	sbci	r29, 0xFF	; 255
    3c24:	e8 81       	ld	r30, Y
    3c26:	f9 81       	ldd	r31, Y+1	; 0x01
    3c28:	c9 5a       	subi	r28, 0xA9	; 169
    3c2a:	d0 40       	sbci	r29, 0x00	; 0
    3c2c:	ef 32       	cpi	r30, 0x2F	; 47
    3c2e:	f1 05       	cpc	r31, r1
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <main+0x1386>
    3c32:	1c c1       	rjmp	.+568    	; 0x3e6c <main+0x15be>
    3c34:	77 c1       	rjmp	.+750    	; 0x3f24 <main+0x1676>
			case '+':
				//Why -48 ?? Because the difference between ASCII of '0' and 0 is 48
				result = (Process[count - 4] - 48)
    3c36:	80 91 ec 00 	lds	r24, 0x00EC
    3c3a:	88 2f       	mov	r24, r24
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	04 97       	sbiw	r24, 0x04	; 4
    3c40:	fc 01       	movw	r30, r24
    3c42:	ec 51       	subi	r30, 0x1C	; 28
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	88 2f       	mov	r24, r24
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	ac 01       	movw	r20, r24
    3c4e:	40 53       	subi	r20, 0x30	; 48
    3c50:	50 40       	sbci	r21, 0x00	; 0
    3c52:	80 91 ec 00 	lds	r24, 0x00EC
    3c56:	88 2f       	mov	r24, r24
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	05 97       	sbiw	r24, 0x05	; 5
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	ec 51       	subi	r30, 0x1C	; 28
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 81       	ld	r24, Z
    3c64:	88 2f       	mov	r24, r24
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	9c 01       	movw	r18, r24
    3c6a:	22 0f       	add	r18, r18
    3c6c:	33 1f       	adc	r19, r19
    3c6e:	c9 01       	movw	r24, r18
    3c70:	88 0f       	add	r24, r24
    3c72:	99 1f       	adc	r25, r25
    3c74:	88 0f       	add	r24, r24
    3c76:	99 1f       	adc	r25, r25
    3c78:	82 0f       	add	r24, r18
    3c7a:	93 1f       	adc	r25, r19
    3c7c:	80 5e       	subi	r24, 0xE0	; 224
    3c7e:	91 40       	sbci	r25, 0x01	; 1
    3c80:	48 0f       	add	r20, r24
    3c82:	59 1f       	adc	r21, r25
    3c84:	80 91 ec 00 	lds	r24, 0x00EC
    3c88:	88 2f       	mov	r24, r24
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	02 97       	sbiw	r24, 0x02	; 2
    3c8e:	fc 01       	movw	r30, r24
    3c90:	ec 51       	subi	r30, 0x1C	; 28
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 81       	ld	r24, Z
    3c96:	88 2f       	mov	r24, r24
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	9c 01       	movw	r18, r24
    3c9c:	22 0f       	add	r18, r18
    3c9e:	33 1f       	adc	r19, r19
    3ca0:	c9 01       	movw	r24, r18
    3ca2:	88 0f       	add	r24, r24
    3ca4:	99 1f       	adc	r25, r25
    3ca6:	88 0f       	add	r24, r24
    3ca8:	99 1f       	adc	r25, r25
    3caa:	82 0f       	add	r24, r18
    3cac:	93 1f       	adc	r25, r19
    3cae:	80 5e       	subi	r24, 0xE0	; 224
    3cb0:	91 40       	sbci	r25, 0x01	; 1
    3cb2:	9a 01       	movw	r18, r20
    3cb4:	28 0f       	add	r18, r24
    3cb6:	39 1f       	adc	r19, r25
    3cb8:	80 91 ec 00 	lds	r24, 0x00EC
    3cbc:	88 2f       	mov	r24, r24
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	01 97       	sbiw	r24, 0x01	; 1
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	ec 51       	subi	r30, 0x1C	; 28
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	80 81       	ld	r24, Z
    3cca:	88 2f       	mov	r24, r24
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	c0 97       	sbiw	r24, 0x30	; 48
    3cd0:	82 0f       	add	r24, r18
    3cd2:	93 1f       	adc	r25, r19
    3cd4:	90 93 ef 00 	sts	0x00EF, r25
    3cd8:	80 93 ee 00 	sts	0x00EE, r24
						+ ((Process[count - 5] - 48) * 10)
						+ ((Process[count - 2] - 48) * 10)
						+ (Process[count - 1] - 48);
				//The result is int so, we want to convert it to be displayed on LCD
				DealWithResult(result);
    3cdc:	80 91 ee 00 	lds	r24, 0x00EE
    3ce0:	90 91 ef 00 	lds	r25, 0x00EF
    3ce4:	0e 94 91 20 	call	0x4122	; 0x4122 <DealWithResult>
    3ce8:	1d c1       	rjmp	.+570    	; 0x3f24 <main+0x1676>
				break;
			case '-':
				result = ((Process[count - 4] - 48)
    3cea:	80 91 ec 00 	lds	r24, 0x00EC
    3cee:	88 2f       	mov	r24, r24
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	04 97       	sbiw	r24, 0x04	; 4
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	ec 51       	subi	r30, 0x1C	; 28
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 81       	ld	r24, Z
    3cfc:	88 2f       	mov	r24, r24
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	ac 01       	movw	r20, r24
    3d02:	40 53       	subi	r20, 0x30	; 48
    3d04:	50 40       	sbci	r21, 0x00	; 0
    3d06:	80 91 ec 00 	lds	r24, 0x00EC
    3d0a:	88 2f       	mov	r24, r24
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	05 97       	sbiw	r24, 0x05	; 5
    3d10:	fc 01       	movw	r30, r24
    3d12:	ec 51       	subi	r30, 0x1C	; 28
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	80 81       	ld	r24, Z
    3d18:	88 2f       	mov	r24, r24
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	9c 01       	movw	r18, r24
    3d1e:	22 0f       	add	r18, r18
    3d20:	33 1f       	adc	r19, r19
    3d22:	c9 01       	movw	r24, r18
    3d24:	88 0f       	add	r24, r24
    3d26:	99 1f       	adc	r25, r25
    3d28:	88 0f       	add	r24, r24
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	82 0f       	add	r24, r18
    3d2e:	93 1f       	adc	r25, r19
    3d30:	80 5e       	subi	r24, 0xE0	; 224
    3d32:	91 40       	sbci	r25, 0x01	; 1
    3d34:	ba 01       	movw	r22, r20
    3d36:	68 0f       	add	r22, r24
    3d38:	79 1f       	adc	r23, r25
    3d3a:	80 91 ec 00 	lds	r24, 0x00EC
    3d3e:	88 2f       	mov	r24, r24
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	fc 01       	movw	r30, r24
    3d46:	ec 51       	subi	r30, 0x1C	; 28
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	80 81       	ld	r24, Z
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	80 e3       	ldi	r24, 0x30	; 48
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	ac 01       	movw	r20, r24
    3d56:	42 1b       	sub	r20, r18
    3d58:	53 0b       	sbc	r21, r19
    3d5a:	80 91 ec 00 	lds	r24, 0x00EC
    3d5e:	88 2f       	mov	r24, r24
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	02 97       	sbiw	r24, 0x02	; 2
    3d64:	fc 01       	movw	r30, r24
    3d66:	ec 51       	subi	r30, 0x1C	; 28
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	88 2f       	mov	r24, r24
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	9c 01       	movw	r18, r24
    3d72:	22 0f       	add	r18, r18
    3d74:	33 1f       	adc	r19, r19
    3d76:	c9 01       	movw	r24, r18
    3d78:	88 0f       	add	r24, r24
    3d7a:	99 1f       	adc	r25, r25
    3d7c:	88 0f       	add	r24, r24
    3d7e:	99 1f       	adc	r25, r25
    3d80:	82 0f       	add	r24, r18
    3d82:	93 1f       	adc	r25, r19
    3d84:	90 95       	com	r25
    3d86:	81 95       	neg	r24
    3d88:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8a:	80 52       	subi	r24, 0x20	; 32
    3d8c:	9e 4f       	sbci	r25, 0xFE	; 254
    3d8e:	84 0f       	add	r24, r20
    3d90:	95 1f       	adc	r25, r21
    3d92:	86 0f       	add	r24, r22
    3d94:	97 1f       	adc	r25, r23
    3d96:	90 93 ef 00 	sts	0x00EF, r25
    3d9a:	80 93 ee 00 	sts	0x00EE, r24
						+ ((Process[count - 5] - 48) * 10))
						- (((Process[count - 2] - 48) * 10)
						+ (Process[count - 1] - 48));
				DealWithResult(result);
    3d9e:	80 91 ee 00 	lds	r24, 0x00EE
    3da2:	90 91 ef 00 	lds	r25, 0x00EF
    3da6:	0e 94 91 20 	call	0x4122	; 0x4122 <DealWithResult>
    3daa:	bc c0       	rjmp	.+376    	; 0x3f24 <main+0x1676>
				break;
			case '*':
				result = ((Process[count - 4] - 48)
    3dac:	80 91 ec 00 	lds	r24, 0x00EC
    3db0:	88 2f       	mov	r24, r24
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	04 97       	sbiw	r24, 0x04	; 4
    3db6:	fc 01       	movw	r30, r24
    3db8:	ec 51       	subi	r30, 0x1C	; 28
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 81       	ld	r24, Z
    3dbe:	88 2f       	mov	r24, r24
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	ac 01       	movw	r20, r24
    3dc4:	40 53       	subi	r20, 0x30	; 48
    3dc6:	50 40       	sbci	r21, 0x00	; 0
    3dc8:	80 91 ec 00 	lds	r24, 0x00EC
    3dcc:	88 2f       	mov	r24, r24
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	05 97       	sbiw	r24, 0x05	; 5
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	ec 51       	subi	r30, 0x1C	; 28
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	80 81       	ld	r24, Z
    3dda:	88 2f       	mov	r24, r24
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	9c 01       	movw	r18, r24
    3de0:	22 0f       	add	r18, r18
    3de2:	33 1f       	adc	r19, r19
    3de4:	c9 01       	movw	r24, r18
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	82 0f       	add	r24, r18
    3df0:	93 1f       	adc	r25, r19
    3df2:	80 5e       	subi	r24, 0xE0	; 224
    3df4:	91 40       	sbci	r25, 0x01	; 1
    3df6:	48 0f       	add	r20, r24
    3df8:	59 1f       	adc	r21, r25
    3dfa:	80 91 ec 00 	lds	r24, 0x00EC
    3dfe:	88 2f       	mov	r24, r24
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	02 97       	sbiw	r24, 0x02	; 2
    3e04:	fc 01       	movw	r30, r24
    3e06:	ec 51       	subi	r30, 0x1C	; 28
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	80 81       	ld	r24, Z
    3e0c:	88 2f       	mov	r24, r24
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	9c 01       	movw	r18, r24
    3e12:	22 0f       	add	r18, r18
    3e14:	33 1f       	adc	r19, r19
    3e16:	c9 01       	movw	r24, r18
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	88 0f       	add	r24, r24
    3e1e:	99 1f       	adc	r25, r25
    3e20:	82 0f       	add	r24, r18
    3e22:	93 1f       	adc	r25, r19
    3e24:	9c 01       	movw	r18, r24
    3e26:	20 5e       	subi	r18, 0xE0	; 224
    3e28:	31 40       	sbci	r19, 0x01	; 1
    3e2a:	80 91 ec 00 	lds	r24, 0x00EC
    3e2e:	88 2f       	mov	r24, r24
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	fc 01       	movw	r30, r24
    3e36:	ec 51       	subi	r30, 0x1C	; 28
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	80 81       	ld	r24, Z
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	c0 97       	sbiw	r24, 0x30	; 48
    3e42:	82 0f       	add	r24, r18
    3e44:	93 1f       	adc	r25, r19
    3e46:	9c 01       	movw	r18, r24
    3e48:	42 9f       	mul	r20, r18
    3e4a:	c0 01       	movw	r24, r0
    3e4c:	43 9f       	mul	r20, r19
    3e4e:	90 0d       	add	r25, r0
    3e50:	52 9f       	mul	r21, r18
    3e52:	90 0d       	add	r25, r0
    3e54:	11 24       	eor	r1, r1
    3e56:	90 93 ef 00 	sts	0x00EF, r25
    3e5a:	80 93 ee 00 	sts	0x00EE, r24
						+ ((Process[count - 5] - 48) * 10))
						* (((Process[count - 2] - 48) * 10)
						+ (Process[count - 1] - 48));
				DealWithResult(result);
    3e5e:	80 91 ee 00 	lds	r24, 0x00EE
    3e62:	90 91 ef 00 	lds	r25, 0x00EF
    3e66:	0e 94 91 20 	call	0x4122	; 0x4122 <DealWithResult>
    3e6a:	5c c0       	rjmp	.+184    	; 0x3f24 <main+0x1676>
				break;
			case '/':
				result = ((Process[count - 4] - 48)
    3e6c:	80 91 ec 00 	lds	r24, 0x00EC
    3e70:	88 2f       	mov	r24, r24
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	04 97       	sbiw	r24, 0x04	; 4
    3e76:	fc 01       	movw	r30, r24
    3e78:	ec 51       	subi	r30, 0x1C	; 28
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	80 81       	ld	r24, Z
    3e7e:	88 2f       	mov	r24, r24
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	ac 01       	movw	r20, r24
    3e84:	40 53       	subi	r20, 0x30	; 48
    3e86:	50 40       	sbci	r21, 0x00	; 0
    3e88:	80 91 ec 00 	lds	r24, 0x00EC
    3e8c:	88 2f       	mov	r24, r24
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	05 97       	sbiw	r24, 0x05	; 5
    3e92:	fc 01       	movw	r30, r24
    3e94:	ec 51       	subi	r30, 0x1C	; 28
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	80 81       	ld	r24, Z
    3e9a:	88 2f       	mov	r24, r24
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	9c 01       	movw	r18, r24
    3ea0:	22 0f       	add	r18, r18
    3ea2:	33 1f       	adc	r19, r19
    3ea4:	c9 01       	movw	r24, r18
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	88 0f       	add	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	82 0f       	add	r24, r18
    3eb0:	93 1f       	adc	r25, r19
    3eb2:	80 5e       	subi	r24, 0xE0	; 224
    3eb4:	91 40       	sbci	r25, 0x01	; 1
    3eb6:	48 0f       	add	r20, r24
    3eb8:	59 1f       	adc	r21, r25
    3eba:	80 91 ec 00 	lds	r24, 0x00EC
    3ebe:	88 2f       	mov	r24, r24
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	02 97       	sbiw	r24, 0x02	; 2
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	ec 51       	subi	r30, 0x1C	; 28
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 81       	ld	r24, Z
    3ecc:	88 2f       	mov	r24, r24
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	9c 01       	movw	r18, r24
    3ed2:	22 0f       	add	r18, r18
    3ed4:	33 1f       	adc	r19, r19
    3ed6:	c9 01       	movw	r24, r18
    3ed8:	88 0f       	add	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	82 0f       	add	r24, r18
    3ee2:	93 1f       	adc	r25, r19
    3ee4:	9c 01       	movw	r18, r24
    3ee6:	20 5e       	subi	r18, 0xE0	; 224
    3ee8:	31 40       	sbci	r19, 0x01	; 1
    3eea:	80 91 ec 00 	lds	r24, 0x00EC
    3eee:	88 2f       	mov	r24, r24
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	fc 01       	movw	r30, r24
    3ef6:	ec 51       	subi	r30, 0x1C	; 28
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	88 2f       	mov	r24, r24
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	c0 97       	sbiw	r24, 0x30	; 48
    3f02:	28 0f       	add	r18, r24
    3f04:	39 1f       	adc	r19, r25
    3f06:	ca 01       	movw	r24, r20
    3f08:	b9 01       	movw	r22, r18
    3f0a:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    3f0e:	cb 01       	movw	r24, r22
    3f10:	90 93 ef 00 	sts	0x00EF, r25
    3f14:	80 93 ee 00 	sts	0x00EE, r24
						+ ((Process[count - 5] - 48) * 10))
						/ (((Process[count - 2] - 48) * 10)
						+ (Process[count - 1] - 48));
				DealWithResult(result);
    3f18:	80 91 ee 00 	lds	r24, 0x00EE
    3f1c:	90 91 ef 00 	lds	r25, 0x00EF
    3f20:	0e 94 91 20 	call	0x4122	; 0x4122 <DealWithResult>
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	aa ef       	ldi	r26, 0xFA	; 250
    3f2a:	b4 e4       	ldi	r27, 0x44	; 68
    3f2c:	89 8f       	std	Y+25, r24	; 0x19
    3f2e:	9a 8f       	std	Y+26, r25	; 0x1a
    3f30:	ab 8f       	std	Y+27, r26	; 0x1b
    3f32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f34:	69 8d       	ldd	r22, Y+25	; 0x19
    3f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	4a ef       	ldi	r20, 0xFA	; 250
    3f42:	54 e4       	ldi	r21, 0x44	; 68
    3f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	8d 8b       	std	Y+21, r24	; 0x15
    3f4e:	9e 8b       	std	Y+22, r25	; 0x16
    3f50:	af 8b       	std	Y+23, r26	; 0x17
    3f52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f54:	6d 89       	ldd	r22, Y+21	; 0x15
    3f56:	7e 89       	ldd	r23, Y+22	; 0x16
    3f58:	8f 89       	ldd	r24, Y+23	; 0x17
    3f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e8       	ldi	r20, 0x80	; 128
    3f62:	5f e3       	ldi	r21, 0x3F	; 63
    3f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f68:	88 23       	and	r24, r24
    3f6a:	2c f4       	brge	.+10     	; 0x3f76 <main+0x16c8>
		__ticks = 1;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	9c 8b       	std	Y+20, r25	; 0x14
    3f72:	8b 8b       	std	Y+19, r24	; 0x13
    3f74:	3f c0       	rjmp	.+126    	; 0x3ff4 <main+0x1746>
	else if (__tmp > 65535)
    3f76:	6d 89       	ldd	r22, Y+21	; 0x15
    3f78:	7e 89       	ldd	r23, Y+22	; 0x16
    3f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	3f ef       	ldi	r19, 0xFF	; 255
    3f82:	4f e7       	ldi	r20, 0x7F	; 127
    3f84:	57 e4       	ldi	r21, 0x47	; 71
    3f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f8a:	18 16       	cp	r1, r24
    3f8c:	4c f5       	brge	.+82     	; 0x3fe0 <main+0x1732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f8e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e2       	ldi	r20, 0x20	; 32
    3f9c:	51 e4       	ldi	r21, 0x41	; 65
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	bc 01       	movw	r22, r24
    3fa8:	cd 01       	movw	r24, r26
    3faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	9c 8b       	std	Y+20, r25	; 0x14
    3fb4:	8b 8b       	std	Y+19, r24	; 0x13
    3fb6:	0f c0       	rjmp	.+30     	; 0x3fd6 <main+0x1728>
    3fb8:	88 ec       	ldi	r24, 0xC8	; 200
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	9a 8b       	std	Y+18, r25	; 0x12
    3fbe:	89 8b       	std	Y+17, r24	; 0x11
    3fc0:	89 89       	ldd	r24, Y+17	; 0x11
    3fc2:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <main+0x1716>
    3fc8:	9a 8b       	std	Y+18, r25	; 0x12
    3fca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3fce:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	9c 8b       	std	Y+20, r25	; 0x14
    3fd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	69 f7       	brne	.-38     	; 0x3fb8 <main+0x170a>
    3fde:	24 c9       	rjmp	.-3512   	; 0x3228 <main+0x97a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    3fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    3fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    3fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	9c 8b       	std	Y+20, r25	; 0x14
    3ff2:	8b 8b       	std	Y+19, r24	; 0x13
    3ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff8:	98 8b       	std	Y+16, r25	; 0x10
    3ffa:	8f 87       	std	Y+15, r24	; 0x0f
    3ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ffe:	98 89       	ldd	r25, Y+16	; 0x10
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <main+0x1752>
    4004:	98 8b       	std	Y+16, r25	; 0x10
    4006:	8f 87       	std	Y+15, r24	; 0x0f
    4008:	0f c9       	rjmp	.-3554   	; 0x3228 <main+0x97a>
				break;
			default:
				break;
			}
	}else{
		Lcd_sendCmd(CLR_Display);
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
    4010:	0c 94 6f 14 	jmp	0x28de	; 0x28de <main+0x30>
	}
		_delay_ms(2000);
}
				}
}else{
		Lcd_sendCmd(CLR_Display);
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	0e 94 a3 0b 	call	0x1746	; 0x1746 <Lcd_sendCmd>
		Lcd_sendString("Wrong Password");
    401a:	81 e7       	ldi	r24, 0x71	; 113
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <Lcd_sendString>
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	aa ef       	ldi	r26, 0xFA	; 250
    4028:	b4 e4       	ldi	r27, 0x44	; 68
    402a:	8b 87       	std	Y+11, r24	; 0x0b
    402c:	9c 87       	std	Y+12, r25	; 0x0c
    402e:	ad 87       	std	Y+13, r26	; 0x0d
    4030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4032:	6b 85       	ldd	r22, Y+11	; 0x0b
    4034:	7c 85       	ldd	r23, Y+12	; 0x0c
    4036:	8d 85       	ldd	r24, Y+13	; 0x0d
    4038:	9e 85       	ldd	r25, Y+14	; 0x0e
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	4a ef       	ldi	r20, 0xFA	; 250
    4040:	54 e4       	ldi	r21, 0x44	; 68
    4042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	8f 83       	std	Y+7, r24	; 0x07
    404c:	98 87       	std	Y+8, r25	; 0x08
    404e:	a9 87       	std	Y+9, r26	; 0x09
    4050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4052:	6f 81       	ldd	r22, Y+7	; 0x07
    4054:	78 85       	ldd	r23, Y+8	; 0x08
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e8       	ldi	r20, 0x80	; 128
    4060:	5f e3       	ldi	r21, 0x3F	; 63
    4062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4066:	88 23       	and	r24, r24
    4068:	2c f4       	brge	.+10     	; 0x4074 <main+0x17c6>
		__ticks = 1;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	9e 83       	std	Y+6, r25	; 0x06
    4070:	8d 83       	std	Y+5, r24	; 0x05
    4072:	3f c0       	rjmp	.+126    	; 0x40f2 <main+0x1844>
	else if (__tmp > 65535)
    4074:	6f 81       	ldd	r22, Y+7	; 0x07
    4076:	78 85       	ldd	r23, Y+8	; 0x08
    4078:	89 85       	ldd	r24, Y+9	; 0x09
    407a:	9a 85       	ldd	r25, Y+10	; 0x0a
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	3f ef       	ldi	r19, 0xFF	; 255
    4080:	4f e7       	ldi	r20, 0x7F	; 127
    4082:	57 e4       	ldi	r21, 0x47	; 71
    4084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4088:	18 16       	cp	r1, r24
    408a:	4c f5       	brge	.+82     	; 0x40de <main+0x1830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408c:	6b 85       	ldd	r22, Y+11	; 0x0b
    408e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4090:	8d 85       	ldd	r24, Y+13	; 0x0d
    4092:	9e 85       	ldd	r25, Y+14	; 0x0e
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e2       	ldi	r20, 0x20	; 32
    409a:	51 e4       	ldi	r21, 0x41	; 65
    409c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9e 83       	std	Y+6, r25	; 0x06
    40b2:	8d 83       	std	Y+5, r24	; 0x05
    40b4:	0f c0       	rjmp	.+30     	; 0x40d4 <main+0x1826>
    40b6:	88 ec       	ldi	r24, 0xC8	; 200
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	9c 83       	std	Y+4, r25	; 0x04
    40bc:	8b 83       	std	Y+3, r24	; 0x03
    40be:	8b 81       	ldd	r24, Y+3	; 0x03
    40c0:	9c 81       	ldd	r25, Y+4	; 0x04
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <main+0x1814>
    40c6:	9c 83       	std	Y+4, r25	; 0x04
    40c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ca:	8d 81       	ldd	r24, Y+5	; 0x05
    40cc:	9e 81       	ldd	r25, Y+6	; 0x06
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	9e 83       	std	Y+6, r25	; 0x06
    40d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d4:	8d 81       	ldd	r24, Y+5	; 0x05
    40d6:	9e 81       	ldd	r25, Y+6	; 0x06
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	69 f7       	brne	.-38     	; 0x40b6 <main+0x1808>
    40dc:	14 c0       	rjmp	.+40     	; 0x4106 <main+0x1858>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9e 83       	std	Y+6, r25	; 0x06
    40f0:	8d 83       	std	Y+5, r24	; 0x05
    40f2:	8d 81       	ldd	r24, Y+5	; 0x05
    40f4:	9e 81       	ldd	r25, Y+6	; 0x06
    40f6:	9a 83       	std	Y+2, r25	; 0x02
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	9a 81       	ldd	r25, Y+2	; 0x02
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <main+0x1850>
    4102:	9a 83       	std	Y+2, r25	; 0x02
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(2000);
}
}
    410a:	cc 54       	subi	r28, 0x4C	; 76
    410c:	df 4f       	sbci	r29, 0xFF	; 255
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	08 95       	ret

00004122 <DealWithResult>:
static void DealWithResult(int result){
    4122:	df 93       	push	r29
    4124:	cf 93       	push	r28
    4126:	00 d0       	rcall	.+0      	; 0x4128 <DealWithResult+0x6>
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	9a 83       	std	Y+2, r25	; 0x02
    412e:	89 83       	std	Y+1, r24	; 0x01
		if (result >= 100 && result < 1000) {
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	9a 81       	ldd	r25, Y+2	; 0x02
    4134:	84 36       	cpi	r24, 0x64	; 100
    4136:	91 05       	cpc	r25, r1
    4138:	64 f1       	brlt	.+88     	; 0x4192 <DealWithResult+0x70>
    413a:	89 81       	ldd	r24, Y+1	; 0x01
    413c:	9a 81       	ldd	r25, Y+2	; 0x02
    413e:	23 e0       	ldi	r18, 0x03	; 3
    4140:	88 3e       	cpi	r24, 0xE8	; 232
    4142:	92 07       	cpc	r25, r18
    4144:	34 f5       	brge	.+76     	; 0x4192 <DealWithResult+0x70>
			Lcd_sendChar((result / 100) + 48);
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	9a 81       	ldd	r25, Y+2	; 0x02
    414a:	24 e6       	ldi	r18, 0x64	; 100
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	b9 01       	movw	r22, r18
    4150:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    4154:	cb 01       	movw	r24, r22
    4156:	80 5d       	subi	r24, 0xD0	; 208
    4158:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
			Lcd_sendChar(((result / 10) % 10) + 48);
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	9a 81       	ldd	r25, Y+2	; 0x02
    4160:	2a e0       	ldi	r18, 0x0A	; 10
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	b9 01       	movw	r22, r18
    4166:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    416a:	cb 01       	movw	r24, r22
    416c:	2a e0       	ldi	r18, 0x0A	; 10
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	b9 01       	movw	r22, r18
    4172:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    4176:	80 5d       	subi	r24, 0xD0	; 208
    4178:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
			Lcd_sendChar((result % 10) + 48);
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	9a 81       	ldd	r25, Y+2	; 0x02
    4180:	2a e0       	ldi	r18, 0x0A	; 10
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	b9 01       	movw	r22, r18
    4186:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    418a:	80 5d       	subi	r24, 0xD0	; 208
    418c:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
    4190:	29 c0       	rjmp	.+82     	; 0x41e4 <DealWithResult+0xc2>
		} else if (result >= 10 && result < 100) {
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	8a 30       	cpi	r24, 0x0A	; 10
    4198:	91 05       	cpc	r25, r1
    419a:	dc f0       	brlt	.+54     	; 0x41d2 <DealWithResult+0xb0>
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	84 36       	cpi	r24, 0x64	; 100
    41a2:	91 05       	cpc	r25, r1
    41a4:	b4 f4       	brge	.+44     	; 0x41d2 <DealWithResult+0xb0>
			Lcd_sendChar((result / 10) + 48);
    41a6:	89 81       	ldd	r24, Y+1	; 0x01
    41a8:	9a 81       	ldd	r25, Y+2	; 0x02
    41aa:	2a e0       	ldi	r18, 0x0A	; 10
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	b9 01       	movw	r22, r18
    41b0:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    41b4:	cb 01       	movw	r24, r22
    41b6:	80 5d       	subi	r24, 0xD0	; 208
    41b8:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
			Lcd_sendChar((result % 10) + 48);
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	9a 81       	ldd	r25, Y+2	; 0x02
    41c0:	2a e0       	ldi	r18, 0x0A	; 10
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	b9 01       	movw	r22, r18
    41c6:	0e 94 68 21 	call	0x42d0	; 0x42d0 <__divmodhi4>
    41ca:	80 5d       	subi	r24, 0xD0	; 208
    41cc:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
    41d0:	09 c0       	rjmp	.+18     	; 0x41e4 <DealWithResult+0xc2>
		} else if (result < 10) {
    41d2:	89 81       	ldd	r24, Y+1	; 0x01
    41d4:	9a 81       	ldd	r25, Y+2	; 0x02
    41d6:	8a 30       	cpi	r24, 0x0A	; 10
    41d8:	91 05       	cpc	r25, r1
    41da:	24 f4       	brge	.+8      	; 0x41e4 <DealWithResult+0xc2>
			Lcd_sendChar(result + 48);
    41dc:	89 81       	ldd	r24, Y+1	; 0x01
    41de:	80 5d       	subi	r24, 0xD0	; 208
    41e0:	0e 94 44 0c 	call	0x1888	; 0x1888 <Lcd_sendChar>
		}
}
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	cf 91       	pop	r28
    41ea:	df 91       	pop	r29
    41ec:	08 95       	ret

000041ee <checkPassword>:
uint8 checkPassword(uint8 Pass[]){
    41ee:	df 93       	push	r29
    41f0:	cf 93       	push	r28
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
    41f6:	2d 97       	sbiw	r28, 0x0d	; 13
    41f8:	0f b6       	in	r0, 0x3f	; 63
    41fa:	f8 94       	cli
    41fc:	de bf       	out	0x3e, r29	; 62
    41fe:	0f be       	out	0x3f, r0	; 63
    4200:	cd bf       	out	0x3d, r28	; 61
    4202:	9a 83       	std	Y+2, r25	; 0x02
    4204:	89 83       	std	Y+1, r24	; 0x01
	if((Pass[0]==1)&(Pass[1]==2)&(Pass[2]==3)&(Pass[3]==4)){
    4206:	e9 81       	ldd	r30, Y+1	; 0x01
    4208:	fa 81       	ldd	r31, Y+2	; 0x02
    420a:	80 81       	ld	r24, Z
    420c:	1d 86       	std	Y+13, r1	; 0x0d
    420e:	81 30       	cpi	r24, 0x01	; 1
    4210:	11 f4       	brne	.+4      	; 0x4216 <checkPassword+0x28>
    4212:	21 e0       	ldi	r18, 0x01	; 1
    4214:	2d 87       	std	Y+13, r18	; 0x0d
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	fc 01       	movw	r30, r24
    421c:	31 96       	adiw	r30, 0x01	; 1
    421e:	80 81       	ld	r24, Z
    4220:	1c 86       	std	Y+12, r1	; 0x0c
    4222:	82 30       	cpi	r24, 0x02	; 2
    4224:	11 f4       	brne	.+4      	; 0x422a <checkPassword+0x3c>
    4226:	31 e0       	ldi	r19, 0x01	; 1
    4228:	3c 87       	std	Y+12, r19	; 0x0c
    422a:	8d 85       	ldd	r24, Y+13	; 0x0d
    422c:	9c 85       	ldd	r25, Y+12	; 0x0c
    422e:	89 23       	and	r24, r25
    4230:	28 2f       	mov	r18, r24
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	3b 87       	std	Y+11, r19	; 0x0b
    4236:	2a 87       	std	Y+10, r18	; 0x0a
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	fc 01       	movw	r30, r24
    423e:	32 96       	adiw	r30, 0x02	; 2
    4240:	80 81       	ld	r24, Z
    4242:	19 86       	std	Y+9, r1	; 0x09
    4244:	18 86       	std	Y+8, r1	; 0x08
    4246:	83 30       	cpi	r24, 0x03	; 3
    4248:	21 f4       	brne	.+8      	; 0x4252 <checkPassword+0x64>
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	99 87       	std	Y+9, r25	; 0x09
    4250:	88 87       	std	Y+8, r24	; 0x08
    4252:	2a 85       	ldd	r18, Y+10	; 0x0a
    4254:	3b 85       	ldd	r19, Y+11	; 0x0b
    4256:	88 85       	ldd	r24, Y+8	; 0x08
    4258:	99 85       	ldd	r25, Y+9	; 0x09
    425a:	28 23       	and	r18, r24
    425c:	39 23       	and	r19, r25
    425e:	3f 83       	std	Y+7, r19	; 0x07
    4260:	2e 83       	std	Y+6, r18	; 0x06
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	9a 81       	ldd	r25, Y+2	; 0x02
    4266:	fc 01       	movw	r30, r24
    4268:	33 96       	adiw	r30, 0x03	; 3
    426a:	80 81       	ld	r24, Z
    426c:	1d 82       	std	Y+5, r1	; 0x05
    426e:	1c 82       	std	Y+4, r1	; 0x04
    4270:	84 30       	cpi	r24, 0x04	; 4
    4272:	21 f4       	brne	.+8      	; 0x427c <checkPassword+0x8e>
    4274:	21 e0       	ldi	r18, 0x01	; 1
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	3d 83       	std	Y+5, r19	; 0x05
    427a:	2c 83       	std	Y+4, r18	; 0x04
    427c:	8e 81       	ldd	r24, Y+6	; 0x06
    427e:	9f 81       	ldd	r25, Y+7	; 0x07
    4280:	2c 81       	ldd	r18, Y+4	; 0x04
    4282:	3d 81       	ldd	r19, Y+5	; 0x05
    4284:	82 23       	and	r24, r18
    4286:	93 23       	and	r25, r19
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	19 f0       	breq	.+6      	; 0x4292 <checkPassword+0xa4>
		return 1;
    428c:	31 e0       	ldi	r19, 0x01	; 1
    428e:	3b 83       	std	Y+3, r19	; 0x03
    4290:	01 c0       	rjmp	.+2      	; 0x4294 <checkPassword+0xa6>
	}else{
		return 0;
    4292:	1b 82       	std	Y+3, r1	; 0x03
    4294:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    4296:	2d 96       	adiw	r28, 0x0d	; 13
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	cf 91       	pop	r28
    42a4:	df 91       	pop	r29
    42a6:	08 95       	ret

000042a8 <__udivmodhi4>:
    42a8:	aa 1b       	sub	r26, r26
    42aa:	bb 1b       	sub	r27, r27
    42ac:	51 e1       	ldi	r21, 0x11	; 17
    42ae:	07 c0       	rjmp	.+14     	; 0x42be <__udivmodhi4_ep>

000042b0 <__udivmodhi4_loop>:
    42b0:	aa 1f       	adc	r26, r26
    42b2:	bb 1f       	adc	r27, r27
    42b4:	a6 17       	cp	r26, r22
    42b6:	b7 07       	cpc	r27, r23
    42b8:	10 f0       	brcs	.+4      	; 0x42be <__udivmodhi4_ep>
    42ba:	a6 1b       	sub	r26, r22
    42bc:	b7 0b       	sbc	r27, r23

000042be <__udivmodhi4_ep>:
    42be:	88 1f       	adc	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	5a 95       	dec	r21
    42c4:	a9 f7       	brne	.-22     	; 0x42b0 <__udivmodhi4_loop>
    42c6:	80 95       	com	r24
    42c8:	90 95       	com	r25
    42ca:	bc 01       	movw	r22, r24
    42cc:	cd 01       	movw	r24, r26
    42ce:	08 95       	ret

000042d0 <__divmodhi4>:
    42d0:	97 fb       	bst	r25, 7
    42d2:	09 2e       	mov	r0, r25
    42d4:	07 26       	eor	r0, r23
    42d6:	0a d0       	rcall	.+20     	; 0x42ec <__divmodhi4_neg1>
    42d8:	77 fd       	sbrc	r23, 7
    42da:	04 d0       	rcall	.+8      	; 0x42e4 <__divmodhi4_neg2>
    42dc:	e5 df       	rcall	.-54     	; 0x42a8 <__udivmodhi4>
    42de:	06 d0       	rcall	.+12     	; 0x42ec <__divmodhi4_neg1>
    42e0:	00 20       	and	r0, r0
    42e2:	1a f4       	brpl	.+6      	; 0x42ea <__divmodhi4_exit>

000042e4 <__divmodhi4_neg2>:
    42e4:	70 95       	com	r23
    42e6:	61 95       	neg	r22
    42e8:	7f 4f       	sbci	r23, 0xFF	; 255

000042ea <__divmodhi4_exit>:
    42ea:	08 95       	ret

000042ec <__divmodhi4_neg1>:
    42ec:	f6 f7       	brtc	.-4      	; 0x42ea <__divmodhi4_exit>
    42ee:	90 95       	com	r25
    42f0:	81 95       	neg	r24
    42f2:	9f 4f       	sbci	r25, 0xFF	; 255
    42f4:	08 95       	ret

000042f6 <__prologue_saves__>:
    42f6:	2f 92       	push	r2
    42f8:	3f 92       	push	r3
    42fa:	4f 92       	push	r4
    42fc:	5f 92       	push	r5
    42fe:	6f 92       	push	r6
    4300:	7f 92       	push	r7
    4302:	8f 92       	push	r8
    4304:	9f 92       	push	r9
    4306:	af 92       	push	r10
    4308:	bf 92       	push	r11
    430a:	cf 92       	push	r12
    430c:	df 92       	push	r13
    430e:	ef 92       	push	r14
    4310:	ff 92       	push	r15
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	cd b7       	in	r28, 0x3d	; 61
    431c:	de b7       	in	r29, 0x3e	; 62
    431e:	ca 1b       	sub	r28, r26
    4320:	db 0b       	sbc	r29, r27
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	09 94       	ijmp

0000432e <__epilogue_restores__>:
    432e:	2a 88       	ldd	r2, Y+18	; 0x12
    4330:	39 88       	ldd	r3, Y+17	; 0x11
    4332:	48 88       	ldd	r4, Y+16	; 0x10
    4334:	5f 84       	ldd	r5, Y+15	; 0x0f
    4336:	6e 84       	ldd	r6, Y+14	; 0x0e
    4338:	7d 84       	ldd	r7, Y+13	; 0x0d
    433a:	8c 84       	ldd	r8, Y+12	; 0x0c
    433c:	9b 84       	ldd	r9, Y+11	; 0x0b
    433e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4340:	b9 84       	ldd	r11, Y+9	; 0x09
    4342:	c8 84       	ldd	r12, Y+8	; 0x08
    4344:	df 80       	ldd	r13, Y+7	; 0x07
    4346:	ee 80       	ldd	r14, Y+6	; 0x06
    4348:	fd 80       	ldd	r15, Y+5	; 0x05
    434a:	0c 81       	ldd	r16, Y+4	; 0x04
    434c:	1b 81       	ldd	r17, Y+3	; 0x03
    434e:	aa 81       	ldd	r26, Y+2	; 0x02
    4350:	b9 81       	ldd	r27, Y+1	; 0x01
    4352:	ce 0f       	add	r28, r30
    4354:	d1 1d       	adc	r29, r1
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
    4360:	ed 01       	movw	r28, r26
    4362:	08 95       	ret

00004364 <strlen>:
    4364:	fc 01       	movw	r30, r24
    4366:	01 90       	ld	r0, Z+
    4368:	00 20       	and	r0, r0
    436a:	e9 f7       	brne	.-6      	; 0x4366 <strlen+0x2>
    436c:	80 95       	com	r24
    436e:	90 95       	com	r25
    4370:	8e 0f       	add	r24, r30
    4372:	9f 1f       	adc	r25, r31
    4374:	08 95       	ret

00004376 <_exit>:
    4376:	f8 94       	cli

00004378 <__stop_program>:
    4378:	ff cf       	rjmp	.-2      	; 0x4378 <__stop_program>
